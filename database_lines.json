["What's New in Python 2.0 (2.0 0)", "************************ (2.0 1)", "Author: (2.0 3)", "   A.M. Kuchling and Moshe Zadka (2.0 4)", "Introduction (2.0 7)", "============ (2.0 8)", "A new release of Python, version 2.0, was released on October 16, (2.0 10)", "2000. This article covers the exciting new features in 2.0, highlights (2.0 11)", "some other useful changes, and points out a few incompatible changes (2.0 12)", "that may require rewriting code. (2.0 13)", "Python's development never completely stops between releases, and a (2.0 15)", "steady flow of bug fixes and improvements are always being submitted. (2.0 16)", "A host of minor fixes, a few optimizations, additional docstrings, and (2.0 17)", "better error messages went into 2.0; to list them all would be (2.0 18)", "impossible, but they're certainly significant. Consult the publicly- (2.0 19)", "available CVS logs if you want to see the full list.  This progress is (2.0 20)", "due to the five developers working for  PythonLabs are now getting (2.0 21)", "paid to spend their days fixing bugs, and also due to the improved (2.0 22)", "communication resulting  from moving to SourceForge. (2.0 23)", "What About Python 1.6? (2.0 26)", "====================== (2.0 27)", "Python 1.6 can be thought of as the Contractual Obligations Python (2.0 29)", "release. After the core development team left CNRI in May 2000, CNRI (2.0 30)", "requested that a 1.6 release be created, containing all the work on (2.0 31)", "Python that had been performed at CNRI.  Python 1.6 therefore (2.0 32)", "represents the state of the CVS tree as of May 2000, with the most (2.0 33)", "significant new feature being Unicode support.  Development continued (2.0 34)", "after May, of course, so the 1.6 tree received a few fixes to ensure (2.0 35)", "that it's forward-compatible with Python 2.0.  1.6 is therefore part (2.0 36)", "of Python's evolution, and not a side branch. (2.0 37)", "So, should you take much interest in Python 1.6?  Probably not.  The (2.0 39)", "1.6final and 2.0beta1 releases were made on the same day (September 5, (2.0 40)", "2000), the plan being to finalize Python 2.0 within a month or so.  If (2.0 41)", "you have applications to maintain, there seems little point in (2.0 42)", "breaking things by moving to 1.6, fixing them, and then having another (2.0 43)", "round of breakage within a month by moving to 2.0; you're better off (2.0 44)", "just going straight to 2.0.  Most of the really interesting features (2.0 45)", "described in this document are only in 2.0, because a lot of work was (2.0 46)", "done between May and September. (2.0 47)", "New Development Process (2.0 50)", "======================= (2.0 51)", "The most important change in Python 2.0 may not be to the code at all, (2.0 53)", "but to how Python is developed: in May 2000 the Python developers (2.0 54)", "began using the tools made available by SourceForge for storing (2.0 55)", "source code, tracking bug reports, and managing the queue of patch (2.0 56)", "submissions.  To report bugs or submit patches for Python 2.0, use the (2.0 57)", "bug tracking and patch manager tools available from Python's project (2.0 58)", "page, located at https://sourceforge.net/projects/python/. (2.0 59)", "The most important of the services now hosted at SourceForge is the (2.0 61)", "Python CVS tree, the version-controlled repository containing the (2.0 62)", "source code for Python. Previously, there were roughly 7 or so people (2.0 63)", "who had write access to the CVS tree, and all patches had to be (2.0 64)", "inspected and checked in by one of the people on this short list. (2.0 65)", "Obviously, this wasn't very scalable.  By moving the CVS tree to (2.0 66)", "SourceForge, it became possible to grant write access to more people; (2.0 67)", "as of September 2000 there were 27 people able to check in changes, a (2.0 68)", "fourfold increase.  This makes possible large-scale changes that (2.0 69)", "wouldn't be attempted if they'd have to be filtered through the small (2.0 70)", "group of core developers.  For example, one day Peter Schneider-Kamp (2.0 71)", "took it into his head to drop K&R C compatibility and convert the C (2.0 72)", "source for Python to ANSI C. After getting approval on the python-dev (2.0 73)", "mailing list, he launched into a flurry of checkins that lasted about (2.0 74)", "a week, other developers joined in to help, and the job was done.  If (2.0 75)", "there were only 5 people with write access, probably that task would (2.0 76)", "have been viewed as \"nice, but not worth the time and effort needed\" (2.0 77)", "and it would never have gotten done. (2.0 78)", "The shift to using SourceForge's services has resulted in a remarkable (2.0 80)", "increase in the speed of development.  Patches now get submitted, (2.0 81)", "commented on, revised by people other than the original submitter, and (2.0 82)", "bounced back and forth between people until the patch is deemed worth (2.0 83)", "checking in.  Bugs are tracked in one central location and can be (2.0 84)", "assigned to a specific person for fixing, and we can count the number (2.0 85)", "of open bugs to measure progress.  This didn't come without a cost: (2.0 86)", "developers now have more e-mail to deal with, more mailing lists to (2.0 87)", "follow, and special tools had to be written for the new environment. (2.0 88)", "For example, SourceForge sends default patch and bug notification (2.0 89)", "e-mail messages that are completely unhelpful, so Ka-Ping Yee wrote an (2.0 90)", "HTML screen-scraper that sends more useful messages. (2.0 91)", "The ease of adding code caused a few initial growing pains, such as (2.0 93)", "code was checked in before it was ready or without getting clear (2.0 94)", "agreement from the developer group.  The approval process that has (2.0 95)", "emerged is somewhat similar to that used by the Apache group. (2.0 96)", "Developers can vote +1, +0, -0, or -1 on a patch; +1 and -1 denote (2.0 97)", "acceptance or rejection, while +0 and -0 mean the developer is mostly (2.0 98)", "indifferent to the change, though with a slight positive or negative (2.0 99)", "slant.  The most significant change from the Apache model is that the (2.0 100)", "voting is essentially advisory, letting Guido van Rossum, who has (2.0 101)", "Benevolent Dictator For Life status, know what the general opinion is. (2.0 102)", "He can still ignore the result of a vote, and approve or reject a (2.0 103)", "change even if the community disagrees with him. (2.0 104)", "Producing an actual patch is the last step in adding a new feature, (2.0 106)", "and is usually easy compared to the earlier task of coming up with a (2.0 107)", "good design. Discussions of new features can often explode into (2.0 108)", "lengthy mailing list threads, making the discussion hard to follow, (2.0 109)", "and no one can read every posting to python-dev.  Therefore, a (2.0 110)", "relatively formal process has been set up to write Python Enhancement (2.0 111)", "Proposals (PEPs), modelled on the Internet RFC process.  PEPs are (2.0 112)", "draft documents that describe a proposed new feature, and are (2.0 113)", "continually revised until the community reaches a consensus, either (2.0 114)", "accepting or rejecting the proposal.  Quoting from the introduction to (2.0 115)", "**PEP 1**, \"PEP Purpose and Guidelines\": (2.0 116)", "   PEP stands for Python Enhancement Proposal.  A PEP is a design (2.0 118)", "   document providing information to the Python community, or (2.0 119)", "   describing a new feature for Python.  The PEP should provide a (2.0 120)", "   concise technical specification of the feature and a rationale for (2.0 121)", "   the feature. (2.0 122)", "   We intend PEPs to be the primary mechanisms for proposing new (2.0 124)", "   features, for collecting community input on an issue, and for (2.0 125)", "   documenting the design decisions that have gone into Python.  The (2.0 126)", "   PEP author is responsible for building consensus within the (2.0 127)", "   community and documenting dissenting opinions. (2.0 128)", "Read the rest of **PEP 1** for the details of the PEP editorial (2.0 130)", "process, style, and format.  PEPs are kept in the Python CVS tree on (2.0 131)", "SourceForge, though they're not part of the Python 2.0 distribution, (2.0 132)", "and are also available in HTML form from (2.0 133)", "https://www.python.org/dev/peps/.  As of September 2000, there are 25 (2.0 134)", "PEPS, ranging from **PEP 201**, \"Lockstep Iteration\", to PEP 225, (2.0 135)", "\"Elementwise/Objectwise Operators\". (2.0 136)", "Unicode (2.0 139)", "======= (2.0 140)", "The largest new feature in Python 2.0 is a new fundamental data type: (2.0 142)", "Unicode strings.  Unicode uses 16-bit numbers to represent characters (2.0 143)", "instead of the 8-bit number used by ASCII, meaning that 65,536 (2.0 144)", "distinct characters can be supported. (2.0 145)", "The final interface for Unicode support was arrived at through (2.0 147)", "countless often-stormy discussions on the python-dev mailing list, and (2.0 148)", "mostly implemented by Marc-Andr\u00e9 Lemburg, based on a Unicode string (2.0 149)", "type implementation by Fredrik Lundh.  A detailed explanation of the (2.0 150)", "interface was written up as **PEP 100**, \"Python Unicode Integration\". (2.0 151)", "This article will simply cover the most significant points about the (2.0 152)", "Unicode interfaces. (2.0 153)", "In Python source code, Unicode strings are written as \"u\"string\"\". (2.0 155)", "Arbitrary Unicode characters can be written using a new escape (2.0 156)", "sequence, \"\\uHHHH\", where *HHHH* is a 4-digit hexadecimal number from (2.0 157)", "0000 to FFFF.  The existing \"\\xHHHH\" escape sequence can also be used, (2.0 158)", "and octal escapes can be used for characters up to U+01FF, which is (2.0 159)", "represented by \"\\777\". (2.0 160)", "Unicode strings, just like regular strings, are an immutable sequence (2.0 162)", "type. They can be indexed and sliced, but not modified in place. (2.0 163)", "Unicode strings have an \"encode( [encoding] )\" method that returns an (2.0 164)", "8-bit string in the desired encoding.  Encodings are named by strings, (2.0 165)", "such as \"'ascii'\", \"'utf-8'\", \"'iso-8859-1'\", or whatever.  A codec (2.0 166)", "API is defined for implementing and registering new encodings that are (2.0 167)", "then available throughout a Python program. If an encoding isn't (2.0 168)", "specified, the default encoding is usually 7-bit ASCII, though it can (2.0 169)", "be changed for your Python installation by calling the (2.0 170)", "\"sys.setdefaultencoding(encoding)\" function in a customized version of (2.0 171)", "\"site.py\". (2.0 172)", "Combining 8-bit and Unicode strings always coerces to Unicode, using (2.0 174)", "the default ASCII encoding; the result of \"'a' + u'bc'\" is \"u'abc'\". (2.0 175)", "New built-in functions have been added, and existing built-ins (2.0 177)", "modified to support Unicode: (2.0 178)", "* \"unichr(ch)\" returns a Unicode string 1 character long, containing (2.0 180)", "  the character *ch*. (2.0 181)", "* \"ord(u)\", where *u* is a 1-character regular or Unicode string, (2.0 183)", "  returns the number of the character as an integer. (2.0 184)", "* \"unicode(string [, encoding]  [, errors] )\" creates a Unicode string (2.0 186)", "  from an 8-bit string.  \"encoding\" is a string naming the encoding to (2.0 187)", "  use. The \"errors\" parameter specifies the treatment of characters (2.0 188)", "  that are invalid for the current encoding; passing \"'strict'\" as the (2.0 189)", "  value causes an exception to be raised on any encoding error, while (2.0 190)", "  \"'ignore'\" causes errors to be silently ignored and \"'replace'\" uses (2.0 191)", "  U+FFFD, the official replacement character, in case of any problems. (2.0 192)", "* The \"exec\" statement, and various built-ins such as \"eval()\", (2.0 194)", "  \"getattr()\", and \"setattr()\" will also accept Unicode strings as (2.0 195)", "  well as regular strings.  (It's possible that the process of fixing (2.0 196)", "  this missed some built-ins; if you find a built-in function that (2.0 197)", "  accepts strings but doesn't accept Unicode strings at all, please (2.0 198)", "  report it as a bug.) (2.0 199)", "A new module, \"unicodedata\", provides an interface to Unicode (2.0 201)", "character properties.  For example, \"unicodedata.category(u'A')\" (2.0 202)", "returns the 2-character string 'Lu', the 'L' denoting it's a letter, (2.0 203)", "and 'u' meaning that it's uppercase. (2.0 204)", "\"unicodedata.bidirectional(u'\\u0660')\" returns 'AN', meaning that (2.0 205)", "U+0660 is an Arabic number. (2.0 206)", "The \"codecs\" module contains functions to look up existing encodings (2.0 208)", "and register new ones.  Unless you want to implement a new encoding, (2.0 209)", "you'll most often use the \"codecs.lookup(encoding)\" function, which (2.0 210)", "returns a 4-element tuple: \"(encode_func, decode_func, stream_reader, (2.0 211)", "stream_writer)\". (2.0 212)", "* *encode_func* is a function that takes a Unicode string, and returns (2.0 214)", "  a 2-tuple \"(string, length)\".  *string* is an 8-bit string (2.0 215)", "  containing a portion (perhaps all) of the Unicode string converted (2.0 216)", "  into the given encoding, and *length* tells you how much of the (2.0 217)", "  Unicode string was converted. (2.0 218)", "* *decode_func* is the opposite of *encode_func*, taking an 8-bit (2.0 220)", "  string and returning a 2-tuple \"(ustring, length)\", consisting of (2.0 221)", "  the resulting Unicode string *ustring* and the integer *length* (2.0 222)", "  telling how much of the 8-bit string was consumed. (2.0 223)", "* *stream_reader* is a class that supports decoding input from a (2.0 225)", "  stream. *stream_reader(file_obj)* returns an object that supports (2.0 226)", "  the \"read()\", \"readline()\", and \"readlines()\" methods.  These (2.0 227)", "  methods will all translate from the given encoding and return (2.0 228)", "  Unicode strings. (2.0 229)", "* *stream_writer*, similarly, is a class that supports encoding output (2.0 231)", "  to a stream.  *stream_writer(file_obj)* returns an object that (2.0 232)", "  supports the \"write()\" and \"writelines()\" methods.  These methods (2.0 233)", "  expect Unicode strings, translating them to the given encoding on (2.0 234)", "  output. (2.0 235)", "For example, the following code writes a Unicode string into a file, (2.0 237)", "encoding it as UTF-8: (2.0 238)", "   import codecs (2.0 240)", "   unistr = u'\\u0660\\u2000ab ...' (2.0 242)", "   (UTF8_encode, UTF8_decode, (2.0 244)", "    UTF8_streamreader, UTF8_streamwriter) = codecs.lookup('UTF-8') (2.0 245)", "   output = UTF8_streamwriter( open( '/tmp/output', 'wb') ) (2.0 247)", "   output.write( unistr ) (2.0 248)", "   output.close() (2.0 249)", "The following code would then read UTF-8 input from the file: (2.0 251)", "   input = UTF8_streamreader( open( '/tmp/output', 'rb') ) (2.0 253)", "   print repr(input.read()) (2.0 254)", "   input.close() (2.0 255)", "Unicode-aware regular expressions are available through the \"re\" (2.0 257)", "module, which has a new underlying implementation called SRE written (2.0 258)", "by Fredrik Lundh of Secret Labs AB. (2.0 259)", "A \"-U\" command line option was added which causes the Python compiler (2.0 261)", "to interpret all string literals as Unicode string literals. This is (2.0 262)", "intended to be used in testing and future-proofing your Python code, (2.0 263)", "since some future version of Python may drop support for 8-bit strings (2.0 264)", "and provide only Unicode strings. (2.0 265)", "List Comprehensions (2.0 268)", "=================== (2.0 269)", "Lists are a workhorse data type in Python, and many programs (2.0 271)", "manipulate a list at some point.  Two common operations on lists are (2.0 272)", "to loop over them, and either pick out the elements that meet a (2.0 273)", "certain criterion, or apply some function to each element.  For (2.0 274)", "example, given a list of strings, you might want to pull out all the (2.0 275)", "strings containing a given substring, or strip off trailing whitespace (2.0 276)", "from each line. (2.0 277)", "The existing \"map()\" and \"filter()\" functions can be used for this (2.0 279)", "purpose, but they require a function as one of their arguments.  This (2.0 280)", "is fine if there's an existing built-in function that can be passed (2.0 281)", "directly, but if there isn't, you have to create a little function to (2.0 282)", "do the required work, and Python's scoping rules make the result ugly (2.0 283)", "if the little function needs additional information.  Take the first (2.0 284)", "example in the previous paragraph, finding all the strings in the list (2.0 285)", "containing a given substring.  You could write the following to do it: (2.0 286)", "   # Given the list L, make a list of all strings (2.0 288)", "   # containing the substring S. (2.0 289)", "   sublist = filter( lambda s, substring=S: (2.0 290)", "                        string.find(s, substring) != -1, (2.0 291)", "                     L) (2.0 292)", "Because of Python's scoping rules, a default argument is used so that (2.0 294)", "the anonymous function created by the \"lambda\" expression knows what (2.0 295)", "substring is being searched for.  List comprehensions make this (2.0 296)", "cleaner: (2.0 297)", "   sublist = [ s for s in L if string.find(s, S) != -1 ] (2.0 299)", "List comprehensions have the form: (2.0 301)", "   [ expression for expr in sequence1 (2.0 303)", "                for expr2 in sequence2 ... (2.0 304)", "                for exprN in sequenceN (2.0 305)", "                if condition ] (2.0 306)", "The \"for\"...\"in\" clauses contain the sequences to be iterated over. (2.0 308)", "The sequences do not have to be the same length, because they are (2.0 309)", "*not* iterated over in parallel, but from left to right; this is (2.0 310)", "explained more clearly in the following paragraphs.  The elements of (2.0 311)", "the generated list will be the successive values of *expression*.  The (2.0 312)", "final \"if\" clause is optional; if present, *expression* is only (2.0 313)", "evaluated and added to the result if *condition* is true. (2.0 314)", "To make the semantics very clear, a list comprehension is equivalent (2.0 316)", "to the following Python code: (2.0 317)", "   for expr1 in sequence1: (2.0 319)", "       for expr2 in sequence2: (2.0 320)", "       ... (2.0 321)", "           for exprN in sequenceN: (2.0 322)", "                if (condition): (2.0 323)", "                     # Append the value of (2.0 324)", "                     # the expression to the (2.0 325)", "                     # resulting list. (2.0 326)", "This means that when there are multiple \"for\"...\"in\" clauses, the (2.0 328)", "resulting list will be equal to the product of the lengths of all the (2.0 329)", "sequences.  If you have two lists of length 3, the output list is 9 (2.0 330)", "elements long: (2.0 331)", "   seq1 = 'abc' (2.0 333)", "   seq2 = (1,2,3) (2.0 334)", "   >>> [ (x,y) for x in seq1 for y in seq2] (2.0 335)", "   [('a', 1), ('a', 2), ('a', 3), ('b', 1), ('b', 2), ('b', 3), ('c', 1), (2.0 336)", "   ('c', 2), ('c', 3)] (2.0 337)", "To avoid introducing an ambiguity into Python's grammar, if (2.0 339)", "*expression* is creating a tuple, it must be surrounded with (2.0 340)", "parentheses.  The first list comprehension below is a syntax error, (2.0 341)", "while the second one is correct: (2.0 342)", "   # Syntax error (2.0 344)", "   [ x,y for x in seq1 for y in seq2] (2.0 345)", "   # Correct (2.0 346)", "   [ (x,y) for x in seq1 for y in seq2] (2.0 347)", "The idea of list comprehensions originally comes from the functional (2.0 349)", "programming language Haskell (https://www.haskell.org).  Greg Ewing (2.0 350)", "argued most effectively for adding them to Python and wrote the (2.0 351)", "initial list comprehension patch, which was then discussed for a (2.0 352)", "seemingly endless time on the python-dev mailing list and kept up-to- (2.0 353)", "date by Skip Montanaro. (2.0 354)", "Augmented Assignment (2.0 357)", "==================== (2.0 358)", "Augmented assignment operators, another long-requested feature, have (2.0 360)", "been added to Python 2.0.  Augmented assignment operators include (2.0 361)", "\"+=\", \"-=\", \"*=\", and so forth.  For example, the statement \"a += 2\" (2.0 362)", "increments the value of the variable  \"a\" by 2, equivalent to the (2.0 363)", "slightly lengthier \"a = a + 2\". (2.0 364)", "The full list of supported assignment operators is \"+=\", \"-=\", \"*=\", (2.0 366)", "\"/=\", \"%=\", \"**=\", \"&=\", \"|=\", \"^=\", \">>=\", and \"<<=\".  Python classes (2.0 367)", "can override the augmented assignment operators by defining methods (2.0 368)", "named \"__iadd__()\", \"__isub__()\", etc.  For example, the following (2.0 369)", "\"Number\" class stores a number and supports using += to create a new (2.0 370)", "instance with an incremented value. (2.0 371)", "   class Number: (2.0 373)", "       def __init__(self, value): (2.0 374)", "           self.value = value (2.0 375)", "       def __iadd__(self, increment): (2.0 376)", "           return Number( self.value + increment) (2.0 377)", "   n = Number(5) (2.0 379)", "   n += 3 (2.0 380)", "   print n.value (2.0 381)", "The \"__iadd__()\" special method is called with the value of the (2.0 383)", "increment, and should return a new instance with an appropriately (2.0 384)", "modified value; this return value is bound as the new value of the (2.0 385)", "variable on the left-hand side. (2.0 386)", "Augmented assignment operators were first introduced in the C (2.0 388)", "programming language, and most C-derived languages, such as **awk**, (2.0 389)", "C++, Java, Perl, and PHP also support them.  The augmented assignment (2.0 390)", "patch was implemented by Thomas Wouters. (2.0 391)", "String Methods (2.0 394)", "============== (2.0 395)", "Until now string-manipulation functionality was in the \"string\" (2.0 397)", "module, which was usually a front-end for the \"strop\" module written (2.0 398)", "in C.  The addition of Unicode posed a difficulty for the \"strop\" (2.0 399)", "module, because the functions would all need to be rewritten in order (2.0 400)", "to accept either 8-bit or Unicode strings.  For functions such as (2.0 401)", "\"string.replace()\", which takes 3 string arguments, that means eight (2.0 402)", "possible permutations, and correspondingly complicated code. (2.0 403)", "Instead, Python 2.0 pushes the problem onto the string type, making (2.0 405)", "string manipulation functionality available through methods on both (2.0 406)", "8-bit strings and Unicode strings. (2.0 407)", "   >>> 'andrew'.capitalize() (2.0 409)", "   'Andrew' (2.0 410)", "   >>> 'hostname'.replace('os', 'linux') (2.0 411)", "   'hlinuxtname' (2.0 412)", "   >>> 'moshe'.find('sh') (2.0 413)", "   2 (2.0 414)", "One thing that hasn't changed, a noteworthy April Fools' joke (2.0 416)", "notwithstanding, is that Python strings are immutable. Thus, the (2.0 417)", "string methods return new strings, and do not modify the string on (2.0 418)", "which they operate. (2.0 419)", "The old \"string\" module is still around for backwards compatibility, (2.0 421)", "but it mostly acts as a front-end to the new string methods. (2.0 422)", "Two methods which have no parallel in pre-2.0 versions, although they (2.0 424)", "did exist in JPython for quite some time, are \"startswith()\" and (2.0 425)", "\"endswith()\". \"s.startswith(t)\" is equivalent to \"s[:len(t)] == t\", (2.0 426)", "while \"s.endswith(t)\" is equivalent to \"s[-len(t):] == t\". (2.0 427)", "One other method which deserves special mention is \"join()\".  The (2.0 429)", "\"join()\" method of a string receives one parameter, a sequence of (2.0 430)", "strings, and is equivalent to the \"string.join()\" function from the (2.0 431)", "old \"string\" module, with the arguments reversed. In other words, (2.0 432)", "\"s.join(seq)\" is equivalent to the old \"string.join(seq, s)\". (2.0 433)", "Garbage Collection of Cycles (2.0 436)", "============================ (2.0 437)", "The C implementation of Python uses reference counting to implement (2.0 439)", "garbage collection.  Every Python object maintains a count of the (2.0 440)", "number of references pointing to itself, and adjusts the count as (2.0 441)", "references are created or destroyed.  Once the reference count reaches (2.0 442)", "zero, the object is no longer accessible, since you need to have a (2.0 443)", "reference to an object to access it, and if the count is zero, no (2.0 444)", "references exist any longer. (2.0 445)", "Reference counting has some pleasant properties: it's easy to (2.0 447)", "understand and implement, and the resulting implementation is (2.0 448)", "portable, fairly fast, and reacts well with other libraries that (2.0 449)", "implement their own memory handling schemes.  The major problem with (2.0 450)", "reference counting is that it sometimes doesn't realise that objects (2.0 451)", "are no longer accessible, resulting in a memory leak.  This happens (2.0 452)", "when there are cycles of references. (2.0 453)", "Consider the simplest possible cycle,  a class instance which has a (2.0 455)", "reference to itself: (2.0 456)", "   instance = SomeClass() (2.0 458)", "   instance.myself = instance (2.0 459)", "After the above two lines of code have been executed, the reference (2.0 461)", "count of \"instance\" is 2; one reference is from the variable named (2.0 462)", "\"'instance'\", and the other is from the \"myself\" attribute of the (2.0 463)", "instance. (2.0 464)", "If the next line of code is \"del instance\", what happens?  The (2.0 466)", "reference count of \"instance\" is decreased by 1, so it has a reference (2.0 467)", "count of 1; the reference in the \"myself\" attribute still exists.  Yet (2.0 468)", "the instance is no longer accessible through Python code, and it could (2.0 469)", "be deleted.  Several objects can participate in a cycle if they have (2.0 470)", "references to each other, causing all of the objects to be leaked. (2.0 471)", "Python 2.0 fixes this problem by periodically executing a cycle (2.0 473)", "detection algorithm which looks for inaccessible cycles and deletes (2.0 474)", "the objects involved. A new \"gc\" module provides functions to perform (2.0 475)", "a garbage collection, obtain debugging statistics, and tuning the (2.0 476)", "collector's parameters. (2.0 477)", "Running the cycle detection algorithm takes some time, and therefore (2.0 479)", "will result in some additional overhead.  It is hoped that after we've (2.0 480)", "gotten experience with the cycle collection from using 2.0, Python 2.1 (2.0 481)", "will be able to minimize the overhead with careful tuning.  It's not (2.0 482)", "yet obvious how much performance is lost, because benchmarking this is (2.0 483)", "tricky and depends crucially on how often the program creates and (2.0 484)", "destroys objects.  The detection of cycles can be disabled when Python (2.0 485)", "is compiled, if you can't afford even a tiny speed penalty or suspect (2.0 486)", "that the cycle collection is buggy, by specifying the \"--without- (2.0 487)", "cycle-gc\" switch when running the **configure** script. (2.0 488)", "Several people tackled this problem and contributed to a solution.  An (2.0 490)", "early implementation of the cycle detection approach was written by (2.0 491)", "Toby Kelsey.  The current algorithm was suggested by Eric Tiedemann (2.0 492)", "during a visit to CNRI, and Guido van Rossum and Neil Schemenauer (2.0 493)", "wrote two different implementations, which were later integrated by (2.0 494)", "Neil.  Lots of other people offered suggestions along the way; the (2.0 495)", "March 2000 archives of the python-dev mailing list contain most of the (2.0 496)", "relevant discussion, especially in the threads titled \"Reference cycle (2.0 497)", "collection for Python\" and \"Finalization again\". (2.0 498)", "Other Core Changes (2.0 501)", "================== (2.0 502)", "Various minor changes have been made to Python's syntax and built-in (2.0 504)", "functions. None of the changes are very far-reaching, but they're (2.0 505)", "handy conveniences. (2.0 506)", "Minor Language Changes (2.0 509)", "---------------------- (2.0 510)", "A new syntax makes it more convenient to call a given function with a (2.0 512)", "tuple of arguments and/or a dictionary of keyword arguments. In Python (2.0 513)", "1.5 and earlier, you'd use the \"apply()\" built-in function: \"apply(f, (2.0 514)", "args, kw)\" calls the function \"f()\" with the argument tuple *args* and (2.0 515)", "the keyword arguments in the dictionary *kw*.  \"apply()\"  is the same (2.0 516)", "in 2.0, but thanks to a patch from Greg Ewing, \"f(*args, **kw)\" is a (2.0 517)", "shorter and clearer way to achieve the same effect.  This syntax is (2.0 518)", "symmetrical with the syntax for defining functions: (2.0 519)", "   def f(*args, **kw): (2.0 521)", "       # args is a tuple of positional args, (2.0 522)", "       # kw is a dictionary of keyword args (2.0 523)", "       ... (2.0 524)", "The \"print\" statement can now have its output directed to a file-like (2.0 526)", "object by following the \"print\" with  \">> file\", similar to the (2.0 527)", "redirection operator in Unix shells. Previously you'd either have to (2.0 528)", "use the \"write()\" method of the file-like object, which lacks the (2.0 529)", "convenience and simplicity of \"print\", or you could assign a new value (2.0 530)", "to \"sys.stdout\" and then restore the old value.  For sending output to (2.0 531)", "standard error, it's much easier to write this: (2.0 532)", "   print >> sys.stderr, \"Warning: action field not supplied\" (2.0 534)", "Modules can now be renamed on importing them, using the syntax \"import (2.0 536)", "module as name\" or \"from module import name as othername\".  The patch (2.0 537)", "was submitted by Thomas Wouters. (2.0 538)", "A new format style is available when using the \"%\" operator; '%r' will (2.0 540)", "insert the \"repr()\" of its argument.  This was also added from (2.0 541)", "symmetry considerations, this time for symmetry with the existing '%s' (2.0 542)", "format style, which inserts the \"str()\" of its argument.  For example, (2.0 543)", "\"'%r %s' % ('abc', 'abc')\" returns a string containing \"'abc' abc\". (2.0 544)", "Previously there was no way to implement a class that overrode (2.0 546)", "Python's built-in \"in\" operator and implemented a custom version. (2.0 547)", "\"obj in seq\" returns true if *obj* is present in the sequence *seq*; (2.0 548)", "Python computes this by simply trying every index of the sequence (2.0 549)", "until either *obj* is found or an \"IndexError\" is encountered.  Moshe (2.0 550)", "Zadka contributed a patch which adds a \"__contains__()\" magic method (2.0 551)", "for providing a custom implementation for \"in\". Additionally, new (2.0 552)", "built-in objects written in C can define what \"in\" means for them via (2.0 553)", "a new slot in the sequence protocol. (2.0 554)", "Earlier versions of Python used a recursive algorithm for deleting (2.0 556)", "objects. Deeply nested data structures could cause the interpreter to (2.0 557)", "fill up the C stack and crash; Christian Tismer rewrote the deletion (2.0 558)", "logic to fix this problem.  On a related note, comparing recursive (2.0 559)", "objects recursed infinitely and crashed; Jeremy Hylton rewrote the (2.0 560)", "code to no longer crash, producing a useful result instead.  For (2.0 561)", "example, after this code: (2.0 562)", "   a = [] (2.0 564)", "   b = [] (2.0 565)", "   a.append(a) (2.0 566)", "   b.append(b) (2.0 567)", "The comparison \"a==b\" returns true, because the two recursive data (2.0 569)", "structures are isomorphic. See the thread \"trashcan and PR#7\" in the (2.0 570)", "April 2000 archives of the python-dev mailing list for the discussion (2.0 571)", "leading up to this implementation, and some useful relevant links. (2.0 572)", "Note that comparisons can now also raise exceptions. In earlier (2.0 573)", "versions of Python, a comparison operation such as \"cmp(a,b)\" would (2.0 574)", "always produce an answer, even if a user-defined \"__cmp__()\" method (2.0 575)", "encountered an error, since the resulting exception would simply be (2.0 576)", "silently swallowed. (2.0 577)", "Work has been done on porting Python to 64-bit Windows on the Itanium (2.0 579)", "processor, mostly by Trent Mick of ActiveState.  (Confusingly, (2.0 580)", "\"sys.platform\" is still \"'win32'\" on Win64 because it seems that for (2.0 581)", "ease of porting, MS Visual C++ treats code as 32 bit on Itanium.) (2.0 582)", "PythonWin also supports Windows CE; see the Python CE page at (2.0 583)", "http://pythonce.sourceforge.net/ for more information. (2.0 584)", "Another new platform is Darwin/MacOS X; initial support for it is in (2.0 586)", "Python 2.0. Dynamic loading works, if you specify \"configure --with- (2.0 587)", "dyld --with-suffix=.x\". Consult the README in the Python source (2.0 588)", "distribution for more instructions. (2.0 589)", "An attempt has been made to alleviate one of Python's warts, the (2.0 591)", "often-confusing \"NameError\" exception when code refers to a local (2.0 592)", "variable before the variable has been assigned a value.  For example, (2.0 593)", "the following code raises an exception on the \"print\" statement in (2.0 594)", "both 1.5.2 and 2.0; in 1.5.2 a \"NameError\" exception is raised, while (2.0 595)", "2.0 raises a new \"UnboundLocalError\" exception. \"UnboundLocalError\" is (2.0 596)", "a subclass of \"NameError\", so any existing code that expects (2.0 597)", "\"NameError\" to be raised should still work. (2.0 598)", "   def f(): (2.0 600)", "       print \"i=\",i (2.0 601)", "       i = i + 1 (2.0 602)", "   f() (2.0 603)", "Two new exceptions, \"TabError\" and \"IndentationError\", have been (2.0 605)", "introduced.  They're both subclasses of \"SyntaxError\", and are raised (2.0 606)", "when Python code is found to be improperly indented. (2.0 607)", "Changes to Built-in Functions (2.0 610)", "----------------------------- (2.0 611)", "A new built-in, \"zip(seq1, seq2, ...)\", has been added.  \"zip()\" (2.0 613)", "returns a list of tuples where each tuple contains the i-th element (2.0 614)", "from each of the argument sequences.  The difference between \"zip()\" (2.0 615)", "and \"map(None, seq1, seq2)\" is that \"map()\" pads the sequences with (2.0 616)", "\"None\" if the sequences aren't all of the same length, while \"zip()\" (2.0 617)", "truncates the returned list to the length of the shortest argument (2.0 618)", "sequence. (2.0 619)", "The \"int()\" and \"long()\" functions now accept an optional \"base\" (2.0 621)", "parameter when the first argument is a string. \"int('123', 10)\" (2.0 622)", "returns 123, while \"int('123', 16)\" returns 291.  \"int(123, 16)\" (2.0 623)", "raises a \"TypeError\" exception with the message \"can't convert non- (2.0 624)", "string with explicit base\". (2.0 625)", "A new variable holding more detailed version information has been (2.0 627)", "added to the \"sys\" module.  \"sys.version_info\" is a tuple \"(major, (2.0 628)", "minor, micro, level, serial)\" For example, in a hypothetical (2.0 629)", "2.0.1beta1, \"sys.version_info\" would be \"(2, 0, 1, 'beta', 1)\". (2.0 630)", "*level* is a string such as \"\"alpha\"\", \"\"beta\"\", or \"\"final\"\" for a (2.0 631)", "final release. (2.0 632)", "Dictionaries have an odd new method, \"setdefault(key, default)\", which (2.0 634)", "behaves similarly to the existing \"get()\" method.  However, if the key (2.0 635)", "is missing, \"setdefault()\" both returns the value of *default* as (2.0 636)", "\"get()\" would do, and also inserts it into the dictionary as the value (2.0 637)", "for *key*.  Thus, the following lines of code: (2.0 638)", "   if dict.has_key( key ): return dict[key] (2.0 640)", "   else: (2.0 641)", "       dict[key] = [] (2.0 642)", "       return dict[key] (2.0 643)", "can be reduced to a single \"return dict.setdefault(key, [])\" (2.0 645)", "statement. (2.0 646)", "The interpreter sets a maximum recursion depth in order to catch (2.0 648)", "runaway recursion before filling the C stack and causing a core dump (2.0 649)", "or GPF.. Previously this limit was fixed when you compiled Python, but (2.0 650)", "in 2.0 the maximum recursion depth can be read and modified using (2.0 651)", "\"sys.getrecursionlimit()\" and \"sys.setrecursionlimit()\". The default (2.0 652)", "value is 1000, and a rough maximum value for a given platform can be (2.0 653)", "found by running a new script, \"Misc/find_recursionlimit.py\". (2.0 654)", "Porting to 2.0 (2.0 657)", "============== (2.0 658)", "New Python releases try hard to be compatible with previous releases, (2.0 660)", "and the record has been pretty good.  However, some changes are (2.0 661)", "considered useful enough, usually because they fix initial design (2.0 662)", "decisions that turned out to be actively mistaken, that breaking (2.0 663)", "backward compatibility can't always be avoided. This section lists the (2.0 664)", "changes in Python 2.0 that may cause old Python code to break. (2.0 665)", "The change which will probably break the most code is tightening up (2.0 667)", "the arguments accepted by some methods.  Some methods would take (2.0 668)", "multiple arguments and treat them as a tuple, particularly various (2.0 669)", "list methods such as \"append()\" and \"insert()\". In earlier versions of (2.0 670)", "Python, if \"L\" is a list, \"L.append( 1,2 )\" appends the tuple \"(1,2)\" (2.0 671)", "to the list.  In Python 2.0 this causes a \"TypeError\" exception to be (2.0 672)", "raised, with the message: 'append requires exactly 1 argument; 2 (2.0 673)", "given'.  The fix is to simply add an extra set of parentheses to pass (2.0 674)", "both values as a tuple:  \"L.append( (1,2) )\". (2.0 675)", "The earlier versions of these methods were more forgiving because they (2.0 677)", "used an old function in Python's C interface to parse their arguments; (2.0 678)", "2.0 modernizes them to use \"PyArg_ParseTuple()\", the current argument (2.0 679)", "parsing function, which provides more helpful error messages and (2.0 680)", "treats multi-argument calls as errors.  If you absolutely must use 2.0 (2.0 681)", "but can't fix your code, you can edit \"Objects/listobject.c\" and (2.0 682)", "define the preprocessor symbol \"NO_STRICT_LIST_APPEND\" to preserve the (2.0 683)", "old behaviour; this isn't recommended. (2.0 684)", "Some of the functions in the \"socket\" module are still forgiving in (2.0 686)", "this way.  For example, \"socket.connect( ('hostname', 25) )()\" is the (2.0 687)", "correct form, passing a tuple representing an IP address, but (2.0 688)", "\"socket.connect( 'hostname', 25 )()\" also works. \"socket.connect_ex()\" (2.0 689)", "and \"socket.bind()\" are similarly easy-going.  2.0alpha1 tightened (2.0 690)", "these functions up, but because the documentation actually used the (2.0 691)", "erroneous multiple argument form, many people wrote code which would (2.0 692)", "break with the stricter checking.  GvR backed out the changes in the (2.0 693)", "face of public reaction, so for the \"socket\" module, the documentation (2.0 694)", "was fixed and the multiple argument form is simply marked as (2.0 695)", "deprecated; it *will* be tightened up again in a future Python (2.0 696)", "version. (2.0 697)", "The \"\\x\" escape in string literals now takes exactly 2 hex digits. (2.0 699)", "Previously it would consume all the hex digits following the 'x' and (2.0 700)", "take the lowest 8 bits of the result, so \"\\x123456\" was equivalent to (2.0 701)", "\"\\x56\". (2.0 702)", "The \"AttributeError\" and \"NameError\" exceptions have a more friendly (2.0 704)", "error message, whose text will be something like \"'Spam' instance has (2.0 705)", "no attribute 'eggs'\" or \"name 'eggs' is not defined\".  Previously the (2.0 706)", "error message was just the missing attribute name \"eggs\", and code (2.0 707)", "written to take advantage of this fact will break in 2.0. (2.0 708)", "Some work has been done to make integers and long integers a bit more (2.0 710)", "interchangeable.  In 1.5.2, large-file support was added for Solaris, (2.0 711)", "to allow reading files larger than 2 GiB; this made the \"tell()\" (2.0 712)", "method of file objects return a long integer instead of a regular (2.0 713)", "integer.  Some code would subtract two file offsets and attempt to use (2.0 714)", "the result to multiply a sequence or slice a string, but this raised a (2.0 715)", "\"TypeError\".  In 2.0, long integers can be used to multiply or slice a (2.0 716)", "sequence, and it'll behave as you'd intuitively expect it to; \"3L * (2.0 717)", "'abc'\" produces 'abcabcabc', and \"(0,1,2,3)[2L:4L]\" produces (2,3). (2.0 718)", "Long integers can also be used in various contexts where previously (2.0 719)", "only integers were accepted, such as in the \"seek()\" method of file (2.0 720)", "objects, and in the formats supported by the \"%\" operator (\"%d\", \"%i\", (2.0 721)", "\"%x\", etc.).  For example, \"\"%d\" % 2L**64\" will produce the string (2.0 722)", "\"18446744073709551616\". (2.0 723)", "The subtlest long integer change of all is that the \"str()\" of a long (2.0 725)", "integer no longer has a trailing 'L' character, though \"repr()\" still (2.0 726)", "includes it.  The 'L' annoyed many people who wanted to print long (2.0 727)", "integers that looked just like regular integers, since they had to go (2.0 728)", "out of their way to chop off the character.  This is no longer a (2.0 729)", "problem in 2.0, but code which does \"str(longval)[:-1]\" and assumes (2.0 730)", "the 'L' is there, will now lose the final digit. (2.0 731)", "Taking the \"repr()\" of a float now uses a different formatting (2.0 733)", "precision than \"str()\".  \"repr()\" uses \"%.17g\" format string for C's (2.0 734)", "\"sprintf()\", while \"str()\" uses \"%.12g\" as before.  The effect is that (2.0 735)", "\"repr()\" may occasionally show more decimal places than  \"str()\", for (2.0 736)", "certain numbers.  For example, the number 8.1 can't be represented (2.0 737)", "exactly in binary, so \"repr(8.1)\" is \"'8.0999999999999996'\", while (2.0 738)", "str(8.1) is \"'8.1'\". (2.0 739)", "The \"-X\" command-line option, which turned all standard exceptions (2.0 741)", "into strings instead of classes, has been removed; the standard (2.0 742)", "exceptions will now always be classes.  The \"exceptions\" module (2.0 743)", "containing the standard exceptions was translated from Python to a (2.0 744)", "built-in C module, written by Barry Warsaw and Fredrik Lundh. (2.0 745)", "Extending/Embedding Changes (2.0 748)", "=========================== (2.0 749)", "Some of the changes are under the covers, and will only be apparent to (2.0 751)", "people writing C extension modules or embedding a Python interpreter (2.0 752)", "in a larger application.  If you aren't dealing with Python's C API, (2.0 753)", "you can safely skip this section. (2.0 754)", "The version number of the Python C API was incremented, so C (2.0 756)", "extensions compiled for 1.5.2 must be recompiled in order to work with (2.0 757)", "2.0.  On Windows, it's not possible for Python 2.0 to import a third (2.0 758)", "party extension built for Python 1.5.x due to how Windows DLLs work, (2.0 759)", "so Python will raise an exception and the import will fail. (2.0 760)", "Users of Jim Fulton's ExtensionClass module will be pleased to find (2.0 762)", "out that hooks have been added so that ExtensionClasses are now (2.0 763)", "supported by \"isinstance()\" and \"issubclass()\". This means you no (2.0 764)", "longer have to remember to write code such as \"if type(obj) == (2.0 765)", "myExtensionClass\", but can use the more natural \"if isinstance(obj, (2.0 766)", "myExtensionClass)\". (2.0 767)", "The \"Python/importdl.c\" file, which was a mass of #ifdefs to support (2.0 769)", "dynamic loading on many different platforms, was cleaned up and (2.0 770)", "reorganised by Greg Stein.  \"importdl.c\" is now quite small, and (2.0 771)", "platform-specific code has been moved into a bunch of (2.0 772)", "\"Python/dynload_*.c\" files.  Another cleanup: there were also a number (2.0 773)", "of \"my*.h\" files in the Include/ directory that held various (2.0 774)", "portability hacks; they've been merged into a single file, (2.0 775)", "\"Include/pyport.h\". (2.0 776)", "Vladimir Marangozov's long-awaited malloc restructuring was completed, (2.0 778)", "to make it easy to have the Python interpreter use a custom allocator (2.0 779)", "instead of C's standard \"malloc()\".  For documentation, read the (2.0 780)", "comments in \"Include/pymem.h\" and \"Include/objimpl.h\".  For the (2.0 781)", "lengthy discussions during which the interface was hammered out, see (2.0 782)", "the Web archives of the 'patches' and 'python-dev' lists at (2.0 783)", "python.org. (2.0 784)", "Recent versions of the GUSI development environment for MacOS support (2.0 786)", "POSIX threads.  Therefore, Python's POSIX threading support now works (2.0 787)", "on the Macintosh.  Threading support using the user-space GNU \"pth\" (2.0 788)", "library was also contributed. (2.0 789)", "Threading support on Windows was enhanced, too.  Windows supports (2.0 791)", "thread locks that use kernel objects only in case of contention; in (2.0 792)", "the common case when there's no contention, they use simpler functions (2.0 793)", "which are an order of magnitude faster.  A threaded version of Python (2.0 794)", "1.5.2 on NT is twice as slow as an unthreaded version; with the 2.0 (2.0 795)", "changes, the difference is only 10%.  These improvements were (2.0 796)", "contributed by Yakov Markovitch. (2.0 797)", "Python 2.0's source now uses only ANSI C prototypes, so compiling (2.0 799)", "Python now requires an ANSI C compiler, and can no longer be done (2.0 800)", "using a compiler that only supports K&R C. (2.0 801)", "Previously the Python virtual machine used 16-bit numbers in its (2.0 803)", "bytecode, limiting the size of source files.  In particular, this (2.0 804)", "affected the maximum size of literal lists and dictionaries in Python (2.0 805)", "source; occasionally people who are generating Python code would run (2.0 806)", "into this limit.  A patch by Charles G. Waldman raises the limit from (2.0 807)", "\"2^16\" to \"2^{32}\". (2.0 808)", "Three new convenience functions intended for adding constants to a (2.0 810)", "module's dictionary at module initialization time were added: (2.0 811)", "\"PyModule_AddObject()\", \"PyModule_AddIntConstant()\", and (2.0 812)", "\"PyModule_AddStringConstant()\".  Each of these functions takes a (2.0 813)", "module object, a null-terminated C string containing the name to be (2.0 814)", "added, and a third argument for the value to be assigned to the name. (2.0 815)", "This third argument is, respectively, a Python object, a C long, or a (2.0 816)", "C string. (2.0 817)", "A wrapper API was added for Unix-style signal handlers. (2.0 819)", "\"PyOS_getsig()\" gets a signal handler and \"PyOS_setsig()\" will set a (2.0 820)", "new handler. (2.0 821)", "Distutils: Making Modules Easy to Install (2.0 824)", "========================================= (2.0 825)", "Before Python 2.0, installing modules was a tedious affair -- there (2.0 827)", "was no way to figure out automatically where Python is installed, or (2.0 828)", "what compiler options to use for extension modules.  Software authors (2.0 829)", "had to go through an arduous ritual of editing Makefiles and (2.0 830)", "configuration files, which only really work on Unix and leave Windows (2.0 831)", "and MacOS unsupported.  Python users faced wildly differing (2.0 832)", "installation instructions which varied between different extension (2.0 833)", "packages, which made administering a Python installation something of (2.0 834)", "a chore. (2.0 835)", "The SIG for distribution utilities, shepherded by Greg Ward, has (2.0 837)", "created the Distutils, a system to make package installation much (2.0 838)", "easier.  They form the \"distutils\" package, a new part of Python's (2.0 839)", "standard library. In the best case, installing a Python module from (2.0 840)", "source will require the same steps: first you simply mean unpack the (2.0 841)", "tarball or zip archive, and the run \"\"python setup.py install\"\".  The (2.0 842)", "platform will be automatically detected, the compiler will be (2.0 843)", "recognized, C extension modules will be compiled, and the distribution (2.0 844)", "installed into the proper directory.  Optional command-line arguments (2.0 845)", "provide more control over the installation process, the distutils (2.0 846)", "package offers many places to override defaults -- separating the (2.0 847)", "build from the install, building or installing in non-default (2.0 848)", "directories, and more. (2.0 849)", "In order to use the Distutils, you need to write a \"setup.py\" script. (2.0 851)", "For the simple case, when the software contains only .py files, a (2.0 852)", "minimal \"setup.py\" can be just a few lines long: (2.0 853)", "   from distutils.core import setup (2.0 855)", "   setup (name = \"foo\", version = \"1.0\", (2.0 856)", "          py_modules = [\"module1\", \"module2\"]) (2.0 857)", "The \"setup.py\" file isn't much more complicated if the software (2.0 859)", "consists of a few packages: (2.0 860)", "   from distutils.core import setup (2.0 862)", "   setup (name = \"foo\", version = \"1.0\", (2.0 863)", "          packages = [\"package\", \"package.subpackage\"]) (2.0 864)", "A C extension can be the most complicated case; here's an example (2.0 866)", "taken from the PyXML package: (2.0 867)", "   from distutils.core import setup, Extension (2.0 869)", "   expat_extension = Extension('xml.parsers.pyexpat', (2.0 871)", "        define_macros = [('XML_NS', None)], (2.0 872)", "        include_dirs = [ 'extensions/expat/xmltok', (2.0 873)", "                         'extensions/expat/xmlparse' ], (2.0 874)", "        sources = [ 'extensions/pyexpat.c', (2.0 875)", "                    'extensions/expat/xmltok/xmltok.c', (2.0 876)", "                    'extensions/expat/xmltok/xmlrole.c', ] (2.0 877)", "          ) (2.0 878)", "   setup (name = \"PyXML\", version = \"0.5.4\", (2.0 879)", "          ext_modules =[ expat_extension ] ) (2.0 880)", "The Distutils can also take care of creating source and binary (2.0 882)", "distributions. The \"sdist\" command, run by \"\"python setup.py sdist\"', (2.0 883)", "builds a source distribution such as \"foo-1.0.tar.gz\". Adding new (2.0 884)", "commands isn't difficult, \"bdist_rpm\" and \"bdist_wininst\" commands (2.0 885)", "have already been contributed to create an RPM distribution and a (2.0 886)", "Windows installer for the software, respectively.  Commands to create (2.0 887)", "other distribution formats such as Debian packages and Solaris \".pkg\" (2.0 888)", "files are in various stages of development. (2.0 889)", "All this is documented in a new manual, *Distributing Python Modules*, (2.0 891)", "that joins the basic set of Python documentation. (2.0 892)", "XML Modules (2.0 895)", "=========== (2.0 896)", "Python 1.5.2 included a simple XML parser in the form of the \"xmllib\" (2.0 898)", "module, contributed by Sjoerd Mullender.  Since 1.5.2's release, two (2.0 899)", "different interfaces for processing XML have become common: SAX2 (2.0 900)", "(version 2 of the Simple API for XML) provides an event-driven (2.0 901)", "interface with some similarities to \"xmllib\", and the DOM (Document (2.0 902)", "Object Model) provides a tree-based interface, transforming an XML (2.0 903)", "document into a tree of nodes that can be traversed and modified. (2.0 904)", "Python 2.0 includes a SAX2 interface and a stripped-down DOM interface (2.0 905)", "as part of the \"xml\" package. Here we will give a brief overview of (2.0 906)", "these new interfaces; consult the Python documentation or the source (2.0 907)", "code for complete details. The Python XML SIG is also working on (2.0 908)", "improved documentation. (2.0 909)", "SAX2 Support (2.0 912)", "------------ (2.0 913)", "SAX defines an event-driven interface for parsing XML.  To use SAX, (2.0 915)", "you must write a SAX handler class.  Handler classes inherit from (2.0 916)", "various classes provided by SAX, and override various methods that (2.0 917)", "will then be called by the XML parser.  For example, the (2.0 918)", "\"startElement()\" and \"endElement()\" methods are called for every (2.0 919)", "starting and end tag encountered by the parser, the \"characters()\" (2.0 920)", "method is called for every chunk of character data, and so forth. (2.0 921)", "The advantage of the event-driven approach is that the whole document (2.0 923)", "doesn't have to be resident in memory at any one time, which matters (2.0 924)", "if you are processing really huge documents.  However, writing the SAX (2.0 925)", "handler class can get very complicated if you're trying to modify the (2.0 926)", "document structure in some elaborate way. (2.0 927)", "For example, this little example program defines a handler that prints (2.0 929)", "a message for every starting and ending tag, and then parses the file (2.0 930)", "\"hamlet.xml\" using it: (2.0 931)", "   from xml import sax (2.0 933)", "   class SimpleHandler(sax.ContentHandler): (2.0 935)", "       def startElement(self, name, attrs): (2.0 936)", "           print 'Start of element:', name, attrs.keys() (2.0 937)", "       def endElement(self, name): (2.0 939)", "           print 'End of element:', name (2.0 940)", "   # Create a parser object (2.0 942)", "   parser = sax.make_parser() (2.0 943)", "   # Tell it what handler to use (2.0 945)", "   handler = SimpleHandler() (2.0 946)", "   parser.setContentHandler( handler ) (2.0 947)", "   # Parse a file! (2.0 949)", "   parser.parse( 'hamlet.xml' ) (2.0 950)", "For more information, consult the Python documentation, or the XML (2.0 952)", "HOWTO at http://pyxml.sourceforge.net/topics/howto/xml-howto.html. (2.0 953)", "DOM Support (2.0 956)", "----------- (2.0 957)", "The Document Object Model is a tree-based representation for an XML (2.0 959)", "document.  A top-level \"Document\" instance is the root of the tree, (2.0 960)", "and has a single child which is the top-level \"Element\" instance. This (2.0 961)", "\"Element\" has children nodes representing character data and any sub- (2.0 962)", "elements, which may have further children of their own, and so forth. (2.0 963)", "Using the DOM you can traverse the resulting tree any way you like, (2.0 964)", "access element and attribute values, insert and delete nodes, and (2.0 965)", "convert the tree back into XML. (2.0 966)", "The DOM is useful for modifying XML documents, because you can create (2.0 968)", "a DOM tree, modify it by adding new nodes or rearranging subtrees, and (2.0 969)", "then produce a new XML document as output.  You can also construct a (2.0 970)", "DOM tree manually and convert it to XML, which can be a more flexible (2.0 971)", "way of producing XML output than simply writing \"<tag1>\"...\"</tag1>\" (2.0 972)", "to a file. (2.0 973)", "The DOM implementation included with Python lives in the (2.0 975)", "\"xml.dom.minidom\" module.  It's a lightweight implementation of the (2.0 976)", "Level 1 DOM with support for XML namespaces.  The  \"parse()\" and (2.0 977)", "\"parseString()\" convenience functions are provided for generating a (2.0 978)", "DOM tree: (2.0 979)", "   from xml.dom import minidom (2.0 981)", "   doc = minidom.parse('hamlet.xml') (2.0 982)", "\"doc\" is a \"Document\" instance.  \"Document\", like all the other DOM (2.0 984)", "classes such as \"Element\" and \"Text\", is a subclass of the \"Node\" base (2.0 985)", "class.  All the nodes in a DOM tree therefore support certain common (2.0 986)", "methods, such as \"toxml()\" which returns a string containing the XML (2.0 987)", "representation of the node and its children.  Each class also has (2.0 988)", "special methods of its own; for example, \"Element\" and \"Document\" (2.0 989)", "instances have a method to find all child elements with a given tag (2.0 990)", "name. Continuing from the previous 2-line example: (2.0 991)", "   perslist = doc.getElementsByTagName( 'PERSONA' ) (2.0 993)", "   print perslist[0].toxml() (2.0 994)", "   print perslist[1].toxml() (2.0 995)", "For the *Hamlet* XML file, the above few lines output: (2.0 997)", "   <PERSONA>CLAUDIUS, king of Denmark. </PERSONA> (2.0 999)", "   <PERSONA>HAMLET, son to the late, and nephew to the present king.</PERSONA> (2.0 1000)", "The root element of the document is available as (2.0 1002)", "\"doc.documentElement\", and its children can be easily modified by (2.0 1003)", "deleting, adding, or removing nodes: (2.0 1004)", "   root = doc.documentElement (2.0 1006)", "   # Remove the first child (2.0 1008)", "   root.removeChild( root.childNodes[0] ) (2.0 1009)", "   # Move the new first child to the end (2.0 1011)", "   root.appendChild( root.childNodes[0] ) (2.0 1012)", "   # Insert the new first child (originally, (2.0 1014)", "   # the third child) before the 20th child. (2.0 1015)", "   root.insertBefore( root.childNodes[0], root.childNodes[20] ) (2.0 1016)", "Again, I will refer you to the Python documentation for a complete (2.0 1018)", "listing of the different \"Node\" classes and their various methods. (2.0 1019)", "Relationship to PyXML (2.0 1022)", "--------------------- (2.0 1023)", "The XML Special Interest Group has been working on XML-related Python (2.0 1025)", "code for a while.  Its code distribution, called PyXML, is available (2.0 1026)", "from the SIG's Web pages at (2.0 1027)", "https://www.python.org/community/sigs/current/xml-sig. The PyXML (2.0 1028)", "distribution also used the package name \"xml\".  If you've written (2.0 1029)", "programs that used PyXML, you're probably wondering about its (2.0 1030)", "compatibility with the 2.0 \"xml\" package. (2.0 1031)", "The answer is that Python 2.0's \"xml\" package isn't compatible with (2.0 1033)", "PyXML, but can be made compatible by installing a recent version (2.0 1034)", "PyXML.  Many applications can get by with the XML support that is (2.0 1035)", "included with Python 2.0, but more complicated applications will (2.0 1036)", "require that the full PyXML package will be installed.  When (2.0 1037)", "installed, PyXML versions 0.6.0 or greater will replace the \"xml\" (2.0 1038)", "package shipped with Python, and will be a strict superset of the (2.0 1039)", "standard package, adding a bunch of additional features.  Some of the (2.0 1040)", "additional features in PyXML include: (2.0 1041)", "* 4DOM, a full DOM implementation from FourThought, Inc. (2.0 1043)", "* The xmlproc validating parser, written by Lars Marius Garshol. (2.0 1045)", "* The \"sgmlop\" parser accelerator module, written by Fredrik Lundh. (2.0 1047)", "Module changes (2.0 1050)", "============== (2.0 1051)", "Lots of improvements and bugfixes were made to Python's extensive (2.0 1053)", "standard library; some of the affected modules include \"readline\", (2.0 1054)", "\"ConfigParser\", \"cgi\", \"calendar\", \"posix\", \"readline\", \"xmllib\", (2.0 1055)", "\"aifc\", \"chunk, wave\", \"random\", \"shelve\", and \"nntplib\".  Consult the (2.0 1056)", "CVS logs for the exact patch-by-patch details. (2.0 1057)", "Brian Gallew contributed OpenSSL support for the \"socket\" module. (2.0 1059)", "OpenSSL is an implementation of the Secure Socket Layer, which (2.0 1060)", "encrypts the data being sent over a socket.  When compiling Python, (2.0 1061)", "you can edit \"Modules/Setup\" to include SSL support, which adds an (2.0 1062)", "additional function to the \"socket\" module: \"socket.ssl(socket, (2.0 1063)", "keyfile, certfile)\", which takes a socket object and returns an SSL (2.0 1064)", "socket.  The \"httplib\" and \"urllib\" modules were also changed to (2.0 1065)", "support \"https://\" URLs, though no one has implemented FTP or SMTP (2.0 1066)", "over SSL. (2.0 1067)", "The \"httplib\" module has been rewritten by Greg Stein to support (2.0 1069)", "HTTP/1.1. Backward compatibility with the 1.5 version of \"httplib\" is (2.0 1070)", "provided, though using HTTP/1.1 features such as pipelining will (2.0 1071)", "require rewriting code to use a different set of interfaces. (2.0 1072)", "The \"Tkinter\" module now supports Tcl/Tk version 8.1, 8.2, or 8.3, and (2.0 1074)", "support for the older 7.x versions has been dropped.  The Tkinter (2.0 1075)", "module now supports displaying Unicode strings in Tk widgets. Also, (2.0 1076)", "Fredrik Lundh contributed an optimization which makes operations like (2.0 1077)", "\"create_line\" and \"create_polygon\" much faster, especially when using (2.0 1078)", "lots of coordinates. (2.0 1079)", "The \"curses\" module has been greatly extended, starting from Oliver (2.0 1081)", "Andrich's enhanced version, to provide many additional functions from (2.0 1082)", "ncurses and SYSV curses, such as colour, alternative character set (2.0 1083)", "support, pads, and mouse support.  This means the module is no longer (2.0 1084)", "compatible with operating systems that only have BSD curses, but there (2.0 1085)", "don't seem to be any currently maintained OSes that fall into this (2.0 1086)", "category. (2.0 1087)", "As mentioned in the earlier discussion of 2.0's Unicode support, the (2.0 1089)", "underlying implementation of the regular expressions provided by the (2.0 1090)", "\"re\" module has been changed.  SRE, a new regular expression engine (2.0 1091)", "written by Fredrik Lundh and partially funded by Hewlett Packard, (2.0 1092)", "supports matching against both 8-bit strings and Unicode strings. (2.0 1093)", "New modules (2.0 1096)", "=========== (2.0 1097)", "A number of new modules were added.  We'll simply list them with brief (2.0 1099)", "descriptions; consult the 2.0 documentation for the details of a (2.0 1100)", "particular module. (2.0 1101)", "* \"atexit\":  For registering functions to be called before the Python (2.0 1103)", "  interpreter exits. Code that currently sets \"sys.exitfunc\" directly (2.0 1104)", "  should be changed to  use the \"atexit\" module instead, importing (2.0 1105)", "  \"atexit\" and calling \"atexit.register()\" with  the function to be (2.0 1106)", "  called on exit. (Contributed by Skip Montanaro.) (2.0 1107)", "* \"codecs\", \"encodings\", \"unicodedata\":  Added as part of the new (2.0 1109)", "  Unicode support. (2.0 1110)", "* \"filecmp\": Supersedes the old \"cmp\", \"cmpcache\" and \"dircmp\" (2.0 1112)", "  modules, which have now become deprecated. (Contributed by Gordon (2.0 1113)", "  MacMillan and Moshe Zadka.) (2.0 1114)", "* \"gettext\": This module provides internationalization (I18N) and (2.0 1116)", "  localization (L10N) support for Python programs by providing an (2.0 1117)", "  interface to the GNU gettext message catalog library. (Integrated by (2.0 1118)", "  Barry Warsaw, from separate contributions by Martin  von L\u00f6wis, (2.0 1119)", "  Peter Funk, and James Henstridge.) (2.0 1120)", "* \"linuxaudiodev\": Support for the \"/dev/audio\" device on Linux, a (2.0 1122)", "  twin to the existing \"sunaudiodev\" module. (Contributed by Peter (2.0 1123)", "  Bosch, with fixes by Jeremy Hylton.) (2.0 1124)", "* \"mmap\": An interface to memory-mapped files on both Windows and (2.0 1126)", "  Unix.  A file's contents can be mapped directly into memory, at (2.0 1127)", "  which point it behaves like a mutable string, so its contents can be (2.0 1128)", "  read and modified.  They can even be passed to functions that expect (2.0 1129)", "  ordinary strings, such as the \"re\" module. (Contributed by Sam (2.0 1130)", "  Rushing, with some extensions by A.M. Kuchling.) (2.0 1131)", "* \"pyexpat\": An interface to the Expat XML parser. (Contributed by (2.0 1133)", "  Paul Prescod.) (2.0 1134)", "* \"robotparser\": Parse a \"robots.txt\" file, which is used for writing (2.0 1136)", "  Web spiders that politely avoid certain areas of a Web site.  The (2.0 1137)", "  parser accepts the contents of a \"robots.txt\" file, builds a set of (2.0 1138)", "  rules from it, and can then answer questions about the fetchability (2.0 1139)", "  of a given URL.  (Contributed by Skip Montanaro.) (2.0 1140)", "* \"tabnanny\": A module/script to  check Python source code for (2.0 1142)", "  ambiguous indentation. (Contributed by Tim Peters.) (2.0 1143)", "* \"UserString\": A base class useful for deriving objects that behave (2.0 1145)", "  like strings. (2.0 1146)", "* \"webbrowser\": A module that provides a platform independent way to (2.0 1148)", "  launch a web browser on a specific URL. For each platform, various (2.0 1149)", "  browsers are tried in a specific order. The user can alter which (2.0 1150)", "  browser is launched by setting the *BROWSER* environment variable. (2.0 1151)", "  (Originally inspired by Eric S. Raymond's patch to \"urllib\" which (2.0 1152)", "  added similar functionality, but the final module comes from code (2.0 1153)", "  originally  implemented by Fred Drake as (2.0 1154)", "  \"Tools/idle/BrowserControl.py\", and adapted for the standard library (2.0 1155)", "  by Fred.) (2.0 1156)", "* \"_winreg\": An interface to the Windows registry.  \"_winreg\" is an (2.0 1158)", "  adaptation of functions that have been part of PythonWin since 1995, (2.0 1159)", "  but has now been added to the core  distribution, and enhanced to (2.0 1160)", "  support Unicode. \"_winreg\" was written by Bill Tutt and Mark (2.0 1161)", "  Hammond. (2.0 1162)", "* \"zipfile\": A module for reading and writing ZIP-format archives. (2.0 1164)", "  These are archives produced by **PKZIP** on DOS/Windows or **zip** (2.0 1165)", "  on Unix, not to be confused with **gzip**-format files (which are (2.0 1166)", "  supported by the \"gzip\" module) (Contributed by James C. Ahlstrom.) (2.0 1167)", "* \"imputil\": A module that provides a simpler way for writing (2.0 1169)", "  customized import hooks, in comparison to the existing \"ihooks\" (2.0 1170)", "  module.  (Implemented by Greg Stein, with much discussion on python- (2.0 1171)", "  dev along the way.) (2.0 1172)", "IDLE Improvements (2.0 1175)", "================= (2.0 1176)", "IDLE is the official Python cross-platform IDE, written using Tkinter. (2.0 1178)", "Python 2.0 includes IDLE 0.6, which adds a number of new features and (2.0 1179)", "improvements.  A partial list: (2.0 1180)", "* UI improvements and optimizations, especially in the area of syntax (2.0 1182)", "  highlighting and auto-indentation. (2.0 1183)", "* The class browser now shows more information, such as the top level (2.0 1185)", "  functions in a module. (2.0 1186)", "* Tab width is now a user settable option. When opening an existing (2.0 1188)", "  Python file, IDLE automatically detects the indentation conventions, (2.0 1189)", "  and adapts. (2.0 1190)", "* There is now support for calling browsers on various platforms, used (2.0 1192)", "  to open the Python documentation in a browser. (2.0 1193)", "* IDLE now has a command line, which is largely similar to  the (2.0 1195)", "  vanilla Python interpreter. (2.0 1196)", "* Call tips were added in many places. (2.0 1198)", "* IDLE can now be installed as a package. (2.0 1200)", "* In the editor window, there is now a line/column bar at the bottom. (2.0 1202)", "* Three new keystroke commands: Check module (\"Alt-F5\"), Import module (2.0 1204)", "  (\"F5\") and Run script (\"Ctrl-F5\"). (2.0 1205)", "Deleted and Deprecated Modules (2.0 1208)", "============================== (2.0 1209)", "A few modules have been dropped because they're obsolete, or because (2.0 1211)", "there are now better ways to do the same thing.  The \"stdwin\" module (2.0 1212)", "is gone; it was for a platform-independent windowing toolkit that's no (2.0 1213)", "longer developed. (2.0 1214)", "A number of modules have been moved to the \"lib-old\" subdirectory: (2.0 1216)", "\"cmp\", \"cmpcache\", \"dircmp\", \"dump\",  \"find\", \"grep\", \"packmail\", (2.0 1217)", "\"poly\", \"util\", \"whatsound\", \"zmod\".  If you have code which relies on (2.0 1218)", "a module  that's been moved to \"lib-old\", you can simply add that (2.0 1219)", "directory to \"sys.path\"   to get them back, but you're encouraged to (2.0 1220)", "update any code that uses these modules. (2.0 1221)", "Acknowledgements (2.0 1224)", "================ (2.0 1225)", "The authors would like to thank the following people for offering (2.0 1227)", "suggestions on various drafts of this article: David Bolen, Mark (2.0 1228)", "Hammond, Gregg Hauser, Jeremy Hylton, Fredrik Lundh, Detlef Lannert, (2.0 1229)", "Aahz Maruch, Skip Montanaro, Vladimir Marangozov, Tobias Polzin, Guido (2.0 1230)", "van Rossum, Neil Schemenauer, and Russ Schmidt. (2.0 1231)"]