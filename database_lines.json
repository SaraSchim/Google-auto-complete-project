["Whats New in Python ", "Author", "   AM Kuchling and Moshe Zadka", "Introduction", "A new release of Python version  was released on October ", " This article covers the exciting new features in  highlights", "some other useful changes and points out a few incompatible changes", "that may require rewriting code", "Pythons development never completely stops between releases and a", "steady flow of bug fixes and improvements are always being submitted", "A host of minor fixes a few optimizations additional docstrings and", "better error messages went into  to list them all would be", "impossible but theyre certainly significant Consult the publicly", "available CVS logs if you want to see the full list  This progress is", "due to the five developers working for  PythonLabs are now getting", "paid to spend their days fixing bugs and also due to the improved", "communication resulting  from moving to SourceForge", "What About Python ", "Python  can be thought of as the Contractual Obligations Python", "release After the core development team left CNRI in May  CNRI", "requested that a  release be created containing all the work on", "Python that had been performed at CNRI  Python  therefore", "represents the state of the CVS tree as of May  with the most", "significant new feature being Unicode support  Development continued", "after May of course so the  tree received a few fixes to ensure", "that its forwardcompatible with Python    is therefore part", "of Pythons evolution and not a side branch", "So should you take much interest in Python   Probably not  The", "final and beta releases were made on the same day September ", " the plan being to finalize Python  within a month or so  If", "you have applications to maintain there seems little point in", "breaking things by moving to  fixing them and then having another", "round of breakage within a month by moving to  youre better off", "just going straight to   Most of the really interesting features", "described in this document are only in  because a lot of work was", "done between May and September", "New Development Process", "The most important change in Python  may not be to the code at all", "but to how Python is developed in May  the Python developers", "began using the tools made available by SourceForge for storing", "source code tracking bug reports and managing the queue of patch", "submissions  To report bugs or submit patches for Python  use the", "bug tracking and patch manager tools available from Pythons project", "page located at httpssourceforgenetprojectspython", "The most important of the services now hosted at SourceForge is the", "Python CVS tree the versioncontrolled repository containing the", "source code for Python Previously there were roughly  or so people", "who had write access to the CVS tree and all patches had to be", "inspected and checked in by one of the people on this short list", "Obviously this wasnt very scalable  By moving the CVS tree to", "SourceForge it became possible to grant write access to more people", "as of September  there were  people able to check in changes a", "fourfold increase  This makes possible largescale changes that", "wouldnt be attempted if theyd have to be filtered through the small", "group of core developers  For example one day Peter SchneiderKamp", "took it into his head to drop KR C compatibility and convert the C", "source for Python to ANSI C After getting approval on the pythondev", "mailing list he launched into a flurry of checkins that lasted about", "a week other developers joined in to help and the job was done  If", "there were only  people with write access probably that task would", "have been viewed as nice but not worth the time and effort needed", "and it would never have gotten done", "The shift to using SourceForges services has resulted in a remarkable", "increase in the speed of development  Patches now get submitted", "commented on revised by people other than the original submitter and", "bounced back and forth between people until the patch is deemed worth", "checking in  Bugs are tracked in one central location and can be", "assigned to a specific person for fixing and we can count the number", "of open bugs to measure progress  This didnt come without a cost", "developers now have more email to deal with more mailing lists to", "follow and special tools had to be written for the new environment", "For example SourceForge sends default patch and bug notification", "email messages that are completely unhelpful so KaPing Yee wrote an", "HTML screenscraper that sends more useful messages", "The ease of adding code caused a few initial growing pains such as", "code was checked in before it was ready or without getting clear", "agreement from the developer group  The approval process that has", "emerged is somewhat similar to that used by the Apache group", "Developers can vote    or  on a patch  and  denote", "acceptance or rejection while  and  mean the developer is mostly", "indifferent to the change though with a slight positive or negative", "slant  The most significant change from the Apache model is that the", "voting is essentially advisory letting Guido van Rossum who has", "Benevolent Dictator For Life status know what the general opinion is", "He can still ignore the result of a vote and approve or reject a", "change even if the community disagrees with him", "Producing an actual patch is the last step in adding a new feature", "and is usually easy compared to the earlier task of coming up with a", "good design Discussions of new features can often explode into", "lengthy mailing list threads making the discussion hard to follow", "and no one can read every posting to pythondev  Therefore a", "relatively formal process has been set up to write Python Enhancement", "Proposals PEPs modelled on the Internet RFC process  PEPs are", "draft documents that describe a proposed new feature and are", "continually revised until the community reaches a consensus either", "accepting or rejecting the proposal  Quoting from the introduction to", "PEP  PEP Purpose and Guidelines", "   PEP stands for Python Enhancement Proposal  A PEP is a design", "   document providing information to the Python community or", "   describing a new feature for Python  The PEP should provide a", "   concise technical specification of the feature and a rationale for", "   the feature", "   We intend PEPs to be the primary mechanisms for proposing new", "   features for collecting community input on an issue and for", "   documenting the design decisions that have gone into Python  The", "   PEP author is responsible for building consensus within the", "   community and documenting dissenting opinions", "Read the rest of PEP  for the details of the PEP editorial", "process style and format  PEPs are kept in the Python CVS tree on", "SourceForge though theyre not part of the Python  distribution", "and are also available in HTML form from", "httpswwwpythonorgdevpeps  As of September  there are ", "PEPS ranging from PEP  Lockstep Iteration to PEP ", "ElementwiseObjectwise Operators", "Unicode", "The largest new feature in Python  is a new fundamental data type", "Unicode strings  Unicode uses bit numbers to represent characters", "instead of the bit number used by ASCII meaning that ", "distinct characters can be supported", "The final interface for Unicode support was arrived at through", "countless oftenstormy discussions on the pythondev mailing list and", "mostly implemented by MarcAndr Lemburg based on a Unicode string", "type implementation by Fredrik Lundh  A detailed explanation of the", "interface was written up as PEP  Python Unicode Integration", "This article will simply cover the most significant points about the", "Unicode interfaces", "In Python source code Unicode strings are written as ustring", "Arbitrary Unicode characters can be written using a new escape", "sequence uHHHH where HHHH is a digit hexadecimal number from", " to FFFF  The existing xHHHH escape sequence can also be used", "and octal escapes can be used for characters up to UFF which is", "represented by ", "Unicode strings just like regular strings are an immutable sequence", "type They can be indexed and sliced but not modified in place", "Unicode strings have an encode encoding  method that returns an", "bit string in the desired encoding  Encodings are named by strings", "such as ascii utf iso or whatever  A codec", "API is defined for implementing and registering new encodings that are", "then available throughout a Python program If an encoding isnt", "specified the default encoding is usually bit ASCII though it can", "be changed for your Python installation by calling the", "syssetdefaultencodingencoding function in a customized version of", "sitepy", "Combining bit and Unicode strings always coerces to Unicode using", "the default ASCII encoding the result of a  ubc is uabc", "New builtin functions have been added and existing builtins", "modified to support Unicode", " unichrch returns a Unicode string  character long containing", "  the character ch", " ordu where u is a character regular or Unicode string", "  returns the number of the character as an integer", " unicodestring  encoding   errors  creates a Unicode string", "  from an bit string  encoding is a string naming the encoding to", "  use The errors parameter specifies the treatment of characters", "  that are invalid for the current encoding passing strict as the", "  value causes an exception to be raised on any encoding error while", "  ignore causes errors to be silently ignored and replace uses", "  UFFFD the official replacement character in case of any problems", " The exec statement and various builtins such as eval", "  getattr and setattr will also accept Unicode strings as", "  well as regular strings  Its possible that the process of fixing", "  this missed some builtins if you find a builtin function that", "  accepts strings but doesnt accept Unicode strings at all please", "  report it as a bug", "A new module unicodedata provides an interface to Unicode", "character properties  For example unicodedatacategoryuA", "returns the character string Lu the L denoting its a letter", "and u meaning that its uppercase", "unicodedatabidirectionaluu returns AN meaning that", "U is an Arabic number", "The codecs module contains functions to look up existing encodings", "and register new ones  Unless you want to implement a new encoding", "youll most often use the codecslookupencoding function which", "returns a element tuple encodefunc decodefunc streamreader", "streamwriter", " encodefunc is a function that takes a Unicode string and returns", "  a tuple string length  string is an bit string", "  containing a portion perhaps all of the Unicode string converted", "  into the given encoding and length tells you how much of the", "  Unicode string was converted", " decodefunc is the opposite of encodefunc taking an bit", "  string and returning a tuple ustring length consisting of", "  the resulting Unicode string ustring and the integer length", "  telling how much of the bit string was consumed", " streamreader is a class that supports decoding input from a", "  stream streamreaderfileobj returns an object that supports", "  the read readline and readlines methods  These", "  methods will all translate from the given encoding and return", "  Unicode strings", " streamwriter similarly is a class that supports encoding output", "  to a stream  streamwriterfileobj returns an object that", "  supports the write and writelines methods  These methods", "  expect Unicode strings translating them to the given encoding on", "  output", "For example the following code writes a Unicode string into a file", "encoding it as UTF", "   import codecs", "   unistr  uuuab ", "   UTFencode UTFdecode", "    UTFstreamreader UTFstreamwriter  codecslookupUTF", "   output  UTFstreamwriter open tmpoutput wb ", "   outputwrite unistr ", "   outputclose", "The following code would then read UTF input from the file", "   input  UTFstreamreader open tmpoutput rb ", "   print reprinputread", "   inputclose", "Unicodeaware regular expressions are available through the re", "module which has a new underlying implementation called SRE written", "by Fredrik Lundh of Secret Labs AB", "A U command line option was added which causes the Python compiler", "to interpret all string literals as Unicode string literals This is", "intended to be used in testing and futureproofing your Python code", "since some future version of Python may drop support for bit strings", "and provide only Unicode strings", "List Comprehensions", "Lists are a workhorse data type in Python and many programs", "manipulate a list at some point  Two common operations on lists are", "to loop over them and either pick out the elements that meet a", "certain criterion or apply some function to each element  For", "example given a list of strings you might want to pull out all the", "strings containing a given substring or strip off trailing whitespace", "from each line", "The existing map and filter functions can be used for this", "purpose but they require a function as one of their arguments  This", "is fine if theres an existing builtin function that can be passed", "directly but if there isnt you have to create a little function to", "do the required work and Pythons scoping rules make the result ugly", "if the little function needs additional information  Take the first", "example in the previous paragraph finding all the strings in the list", "containing a given substring  You could write the following to do it", "    Given the list L make a list of all strings", "    containing the substring S", "   sublist  filter lambda s substringS", "                        stringfinds substring  ", "                     L", "Because of Pythons scoping rules a default argument is used so that", "the anonymous function created by the lambda expression knows what", "substring is being searched for  List comprehensions make this", "cleaner", "   sublist   s for s in L if stringfinds S   ", "List comprehensions have the form", "    expression for expr in sequence", "                for expr in sequence ", "                for exprN in sequenceN", "                if condition ", "The forin clauses contain the sequences to be iterated over", "The sequences do not have to be the same length because they are", "not iterated over in parallel but from left to right this is", "explained more clearly in the following paragraphs  The elements of", "the generated list will be the successive values of expression  The", "final if clause is optional if present expression is only", "evaluated and added to the result if condition is true", "To make the semantics very clear a list comprehension is equivalent", "to the following Python code", "   for expr in sequence", "       for expr in sequence", "       ", "           for exprN in sequenceN", "                if condition", "                      Append the value of", "                      the expression to the", "                      resulting list", "This means that when there are multiple forin clauses the", "resulting list will be equal to the product of the lengths of all the", "sequences  If you have two lists of length  the output list is ", "elements long", "   seq  abc", "   seq  ", "     xy for x in seq for y in seq", "   a  a  a  b  b  b  c ", "   c  c ", "To avoid introducing an ambiguity into Pythons grammar if", "expression is creating a tuple it must be surrounded with", "parentheses  The first list comprehension below is a syntax error", "while the second one is correct", "    Syntax error", "    xy for x in seq for y in seq", "    Correct", "    xy for x in seq for y in seq", "The idea of list comprehensions originally comes from the functional", "programming language Haskell httpswwwhaskellorg  Greg Ewing", "argued most effectively for adding them to Python and wrote the", "initial list comprehension patch which was then discussed for a", "seemingly endless time on the pythondev mailing list and kept upto", "date by Skip Montanaro", "Augmented Assignment", "Augmented assignment operators another longrequested feature have", "been added to Python   Augmented assignment operators include", "   and so forth  For example the statement a  ", "increments the value of the variable  a by  equivalent to the", "slightly lengthier a  a  ", "The full list of supported assignment operators is   ", "       and   Python classes", "can override the augmented assignment operators by defining methods", "named iadd isub etc  For example the following", "Number class stores a number and supports using  to create a new", "instance with an incremented value", "   class Number", "       def initself value", "           selfvalue  value", "       def iaddself increment", "           return Number selfvalue  increment", "   n  Number", "   n  ", "   print nvalue", "The iadd special method is called with the value of the", "increment and should return a new instance with an appropriately", "modified value this return value is bound as the new value of the", "variable on the lefthand side", "Augmented assignment operators were first introduced in the C", "programming language and most Cderived languages such as awk", "C Java Perl and PHP also support them  The augmented assignment", "patch was implemented by Thomas Wouters", "String Methods", "Until now stringmanipulation functionality was in the string", "module which was usually a frontend for the strop module written", "in C  The addition of Unicode posed a difficulty for the strop", "module because the functions would all need to be rewritten in order", "to accept either bit or Unicode strings  For functions such as", "stringreplace which takes  string arguments that means eight", "possible permutations and correspondingly complicated code", "Instead Python  pushes the problem onto the string type making", "string manipulation functionality available through methods on both", "bit strings and Unicode strings", "    andrewcapitalize", "   Andrew", "    hostnamereplaceos linux", "   hlinuxtname", "    moshefindsh", "   ", "One thing that hasnt changed a noteworthy April Fools joke", "notwithstanding is that Python strings are immutable Thus the", "string methods return new strings and do not modify the string on", "which they operate", "The old string module is still around for backwards compatibility", "but it mostly acts as a frontend to the new string methods", "Two methods which have no parallel in pre versions although they", "did exist in JPython for quite some time are startswith and", "endswith sstartswitht is equivalent to slent  t", "while sendswitht is equivalent to slent  t", "One other method which deserves special mention is join  The", "join method of a string receives one parameter a sequence of", "strings and is equivalent to the stringjoin function from the", "old string module with the arguments reversed In other words", "sjoinseq is equivalent to the old stringjoinseq s", "Garbage Collection of Cycles", "The C implementation of Python uses reference counting to implement", "garbage collection  Every Python object maintains a count of the", "number of references pointing to itself and adjusts the count as", "references are created or destroyed  Once the reference count reaches", "zero the object is no longer accessible since you need to have a", "reference to an object to access it and if the count is zero no", "references exist any longer", "Reference counting has some pleasant properties its easy to", "understand and implement and the resulting implementation is", "portable fairly fast and reacts well with other libraries that", "implement their own memory handling schemes  The major problem with", "reference counting is that it sometimes doesnt realise that objects", "are no longer accessible resulting in a memory leak  This happens", "when there are cycles of references", "Consider the simplest possible cycle  a class instance which has a", "reference to itself", "   instance  SomeClass", "   instancemyself  instance", "After the above two lines of code have been executed the reference", "count of instance is  one reference is from the variable named", "instance and the other is from the myself attribute of the", "instance", "If the next line of code is del instance what happens  The", "reference count of instance is decreased by  so it has a reference", "count of  the reference in the myself attribute still exists  Yet", "the instance is no longer accessible through Python code and it could", "be deleted  Several objects can participate in a cycle if they have", "references to each other causing all of the objects to be leaked", "Python  fixes this problem by periodically executing a cycle", "detection algorithm which looks for inaccessible cycles and deletes", "the objects involved A new gc module provides functions to perform", "a garbage collection obtain debugging statistics and tuning the", "collectors parameters", "Running the cycle detection algorithm takes some time and therefore", "will result in some additional overhead  It is hoped that after weve", "gotten experience with the cycle collection from using  Python ", "will be able to minimize the overhead with careful tuning  Its not", "yet obvious how much performance is lost because benchmarking this is", "tricky and depends crucially on how often the program creates and", "destroys objects  The detection of cycles can be disabled when Python", "is compiled if you cant afford even a tiny speed penalty or suspect", "that the cycle collection is buggy by specifying the without", "cyclegc switch when running the configure script", "Several people tackled this problem and contributed to a solution  An", "early implementation of the cycle detection approach was written by", "Toby Kelsey  The current algorithm was suggested by Eric Tiedemann", "during a visit to CNRI and Guido van Rossum and Neil Schemenauer", "wrote two different implementations which were later integrated by", "Neil  Lots of other people offered suggestions along the way the", "March  archives of the pythondev mailing list contain most of the", "relevant discussion especially in the threads titled Reference cycle", "collection for Python and Finalization again", "Other Core Changes", "Various minor changes have been made to Pythons syntax and builtin", "functions None of the changes are very farreaching but theyre", "handy conveniences", "Minor Language Changes", "A new syntax makes it more convenient to call a given function with a", "tuple of arguments andor a dictionary of keyword arguments In Python", " and earlier youd use the apply builtin function applyf", "args kw calls the function f with the argument tuple args and", "the keyword arguments in the dictionary kw  apply  is the same", "in  but thanks to a patch from Greg Ewing fargs kw is a", "shorter and clearer way to achieve the same effect  This syntax is", "symmetrical with the syntax for defining functions", "   def fargs kw", "        args is a tuple of positional args", "        kw is a dictionary of keyword args", "       ", "The print statement can now have its output directed to a filelike", "object by following the print with   file similar to the", "redirection operator in Unix shells Previously youd either have to", "use the write method of the filelike object which lacks the", "convenience and simplicity of print or you could assign a new value", "to sysstdout and then restore the old value  For sending output to", "standard error its much easier to write this", "   print  sysstderr Warning action field not supplied", "Modules can now be renamed on importing them using the syntax import", "module as name or from module import name as othername  The patch", "was submitted by Thomas Wouters", "A new format style is available when using the  operator r will", "insert the repr of its argument  This was also added from", "symmetry considerations this time for symmetry with the existing s", "format style which inserts the str of its argument  For example", "r s  abc abc returns a string containing abc abc", "Previously there was no way to implement a class that overrode", "Pythons builtin in operator and implemented a custom version", "obj in seq returns true if obj is present in the sequence seq", "Python computes this by simply trying every index of the sequence", "until either obj is found or an IndexError is encountered  Moshe", "Zadka contributed a patch which adds a contains magic method", "for providing a custom implementation for in Additionally new", "builtin objects written in C can define what in means for them via", "a new slot in the sequence protocol", "Earlier versions of Python used a recursive algorithm for deleting", "objects Deeply nested data structures could cause the interpreter to", "fill up the C stack and crash Christian Tismer rewrote the deletion", "logic to fix this problem  On a related note comparing recursive", "objects recursed infinitely and crashed Jeremy Hylton rewrote the", "code to no longer crash producing a useful result instead  For", "example after this code", "   a  ", "   b  ", "   aappenda", "   bappendb", "The comparison ab returns true because the two recursive data", "structures are isomorphic See the thread trashcan and PR in the", "April  archives of the pythondev mailing list for the discussion", "leading up to this implementation and some useful relevant links", "Note that comparisons can now also raise exceptions In earlier", "versions of Python a comparison operation such as cmpab would", "always produce an answer even if a userdefined cmp method", "encountered an error since the resulting exception would simply be", "silently swallowed", "Work has been done on porting Python to bit Windows on the Itanium", "processor mostly by Trent Mick of ActiveState  Confusingly", "sysplatform is still win on Win because it seems that for", "ease of porting MS Visual C treats code as  bit on Itanium", "PythonWin also supports Windows CE see the Python CE page at", "httppythoncesourceforgenet for more information", "Another new platform is DarwinMacOS X initial support for it is in", "Python  Dynamic loading works if you specify configure with", "dyld withsuffixx Consult the README in the Python source", "distribution for more instructions", "An attempt has been made to alleviate one of Pythons warts the", "oftenconfusing NameError exception when code refers to a local", "variable before the variable has been assigned a value  For example", "the following code raises an exception on the print statement in", "both  and  in  a NameError exception is raised while", " raises a new UnboundLocalError exception UnboundLocalError is", "a subclass of NameError so any existing code that expects", "NameError to be raised should still work", "   def f", "       print ii", "       i  i  ", "   f", "Two new exceptions TabError and IndentationError have been", "introduced  Theyre both subclasses of SyntaxError and are raised", "when Python code is found to be improperly indented", "Changes to Builtin Functions", "A new builtin zipseq seq  has been added  zip", "returns a list of tuples where each tuple contains the ith element", "from each of the argument sequences  The difference between zip", "and mapNone seq seq is that map pads the sequences with", "None if the sequences arent all of the same length while zip", "truncates the returned list to the length of the shortest argument", "sequence", "The int and long functions now accept an optional base", "parameter when the first argument is a string int ", "returns  while int  returns   int ", "raises a TypeError exception with the message cant convert non", "string with explicit base", "A new variable holding more detailed version information has been", "added to the sys module  sysversioninfo is a tuple major", "minor micro level serial For example in a hypothetical", "beta sysversioninfo would be    beta ", "level is a string such as alpha beta or final for a", "final release", "Dictionaries have an odd new method setdefaultkey default which", "behaves similarly to the existing get method  However if the key", "is missing setdefault both returns the value of default as", "get would do and also inserts it into the dictionary as the value", "for key  Thus the following lines of code", "   if dicthaskey key  return dictkey", "   else", "       dictkey  ", "       return dictkey", "can be reduced to a single return dictsetdefaultkey ", "statement", "The interpreter sets a maximum recursion depth in order to catch", "runaway recursion before filling the C stack and causing a core dump", "or GPF Previously this limit was fixed when you compiled Python but", "in  the maximum recursion depth can be read and modified using", "sysgetrecursionlimit and syssetrecursionlimit The default", "value is  and a rough maximum value for a given platform can be", "found by running a new script Miscfindrecursionlimitpy", "Porting to ", "New Python releases try hard to be compatible with previous releases", "and the record has been pretty good  However some changes are", "considered useful enough usually because they fix initial design", "decisions that turned out to be actively mistaken that breaking", "backward compatibility cant always be avoided This section lists the", "changes in Python  that may cause old Python code to break", "The change which will probably break the most code is tightening up", "the arguments accepted by some methods  Some methods would take", "multiple arguments and treat them as a tuple particularly various", "list methods such as append and insert In earlier versions of", "Python if L is a list Lappend   appends the tuple ", "to the list  In Python  this causes a TypeError exception to be", "raised with the message append requires exactly  argument ", "given  The fix is to simply add an extra set of parentheses to pass", "both values as a tuple  Lappend  ", "The earlier versions of these methods were more forgiving because they", "used an old function in Pythons C interface to parse their arguments", " modernizes them to use PyArgParseTuple the current argument", "parsing function which provides more helpful error messages and", "treats multiargument calls as errors  If you absolutely must use ", "but cant fix your code you can edit Objectslistobjectc and", "define the preprocessor symbol NOSTRICTLISTAPPEND to preserve the", "old behaviour this isnt recommended", "Some of the functions in the socket module are still forgiving in", "this way  For example socketconnect hostname   is the", "correct form passing a tuple representing an IP address but", "socketconnect hostname   also works socketconnectex", "and socketbind are similarly easygoing  alpha tightened", "these functions up but because the documentation actually used the", "erroneous multiple argument form many people wrote code which would", "break with the stricter checking  GvR backed out the changes in the", "face of public reaction so for the socket module the documentation", "was fixed and the multiple argument form is simply marked as", "deprecated it will be tightened up again in a future Python", "version", "The x escape in string literals now takes exactly  hex digits", "Previously it would consume all the hex digits following the x and", "take the lowest  bits of the result so x was equivalent to", "The AttributeError and NameError exceptions have a more friendly", "error message whose text will be something like Spam instance has", "no attribute eggs or name eggs is not defined  Previously the", "error message was just the missing attribute name eggs and code", "written to take advantage of this fact will break in ", "Some work has been done to make integers and long integers a bit more", "interchangeable  In  largefile support was added for Solaris", "to allow reading files larger than  GiB this made the tell", "method of file objects return a long integer instead of a regular", "integer  Some code would subtract two file offsets and attempt to use", "the result to multiply a sequence or slice a string but this raised a", "TypeError  In  long integers can be used to multiply or slice a", "sequence and itll behave as youd intuitively expect it to L ", "abc produces abcabcabc and LL produces ", "Long integers can also be used in various contexts where previously", "only integers were accepted such as in the seek method of file", "objects and in the formats supported by the  operator d i", "x etc  For example d  L will produce the string", "The subtlest long integer change of all is that the str of a long", "integer no longer has a trailing L character though repr still", "includes it  The L annoyed many people who wanted to print long", "integers that looked just like regular integers since they had to go", "out of their way to chop off the character  This is no longer a", "problem in  but code which does strlongval and assumes", "the L is there will now lose the final digit", "Taking the repr of a float now uses a different formatting", "precision than str  repr uses g format string for Cs", "sprintf while str uses g as before  The effect is that", "repr may occasionally show more decimal places than  str for", "certain numbers  For example the number  cant be represented", "exactly in binary so repr is  while", "str is ", "The X commandline option which turned all standard exceptions", "into strings instead of classes has been removed the standard", "exceptions will now always be classes  The exceptions module", "containing the standard exceptions was translated from Python to a", "builtin C module written by Barry Warsaw and Fredrik Lundh", "ExtendingEmbedding Changes", "Some of the changes are under the covers and will only be apparent to", "people writing C extension modules or embedding a Python interpreter", "in a larger application  If you arent dealing with Pythons C API", "you can safely skip this section", "The version number of the Python C API was incremented so C", "extensions compiled for  must be recompiled in order to work with", "  On Windows its not possible for Python  to import a third", "party extension built for Python x due to how Windows DLLs work", "so Python will raise an exception and the import will fail", "Users of Jim Fultons ExtensionClass module will be pleased to find", "out that hooks have been added so that ExtensionClasses are now", "supported by isinstance and issubclass This means you no", "longer have to remember to write code such as if typeobj ", "myExtensionClass but can use the more natural if isinstanceobj", "myExtensionClass", "The Pythonimportdlc file which was a mass of ifdefs to support", "dynamic loading on many different platforms was cleaned up and", "reorganised by Greg Stein  importdlc is now quite small and", "platformspecific code has been moved into a bunch of", "Pythondynloadc files  Another cleanup there were also a number", "of myh files in the Include directory that held various", "portability hacks theyve been merged into a single file", "Includepyporth", "Vladimir Marangozovs longawaited malloc restructuring was completed", "to make it easy to have the Python interpreter use a custom allocator", "instead of Cs standard malloc  For documentation read the", "comments in Includepymemh and Includeobjimplh  For the", "lengthy discussions during which the interface was hammered out see", "the Web archives of the patches and pythondev lists at", "pythonorg", "Recent versions of the GUSI development environment for MacOS support", "POSIX threads  Therefore Pythons POSIX threading support now works", "on the Macintosh  Threading support using the userspace GNU pth", "library was also contributed", "Threading support on Windows was enhanced too  Windows supports", "thread locks that use kernel objects only in case of contention in", "the common case when theres no contention they use simpler functions", "which are an order of magnitude faster  A threaded version of Python", " on NT is twice as slow as an unthreaded version with the ", "changes the difference is only   These improvements were", "contributed by Yakov Markovitch", "Python s source now uses only ANSI C prototypes so compiling", "Python now requires an ANSI C compiler and can no longer be done", "using a compiler that only supports KR C", "Previously the Python virtual machine used bit numbers in its", "bytecode limiting the size of source files  In particular this", "affected the maximum size of literal lists and dictionaries in Python", "source occasionally people who are generating Python code would run", "into this limit  A patch by Charles G Waldman raises the limit from", " to ", "Three new convenience functions intended for adding constants to a", "modules dictionary at module initialization time were added", "PyModuleAddObject PyModuleAddIntConstant and", "PyModuleAddStringConstant  Each of these functions takes a", "module object a nullterminated C string containing the name to be", "added and a third argument for the value to be assigned to the name", "This third argument is respectively a Python object a C long or a", "C string", "A wrapper API was added for Unixstyle signal handlers", "PyOSgetsig gets a signal handler and PyOSsetsig will set a", "new handler", "Distutils Making Modules Easy to Install", "Before Python  installing modules was a tedious affair  there", "was no way to figure out automatically where Python is installed or", "what compiler options to use for extension modules  Software authors", "had to go through an arduous ritual of editing Makefiles and", "configuration files which only really work on Unix and leave Windows", "and MacOS unsupported  Python users faced wildly differing", "installation instructions which varied between different extension", "packages which made administering a Python installation something of", "a chore", "The SIG for distribution utilities shepherded by Greg Ward has", "created the Distutils a system to make package installation much", "easier  They form the distutils package a new part of Pythons", "standard library In the best case installing a Python module from", "source will require the same steps first you simply mean unpack the", "tarball or zip archive and the run python setuppy install  The", "platform will be automatically detected the compiler will be", "recognized C extension modules will be compiled and the distribution", "installed into the proper directory  Optional commandline arguments", "provide more control over the installation process the distutils", "package offers many places to override defaults  separating the", "build from the install building or installing in nondefault", "directories and more", "In order to use the Distutils you need to write a setuppy script", "For the simple case when the software contains only py files a", "minimal setuppy can be just a few lines long", "   from distutilscore import setup", "   setup name  foo version  ", "          pymodules  module module", "The setuppy file isnt much more complicated if the software", "consists of a few packages", "   from distutilscore import setup", "   setup name  foo version  ", "          packages  package packagesubpackage", "A C extension can be the most complicated case heres an example", "taken from the PyXML package", "   from distutilscore import setup Extension", "   expatextension  Extensionxmlparserspyexpat", "        definemacros  XMLNS None", "        includedirs   extensionsexpatxmltok", "                         extensionsexpatxmlparse ", "        sources   extensionspyexpatc", "                    extensionsexpatxmltokxmltokc", "                    extensionsexpatxmltokxmlrolec ", "          ", "   setup name  PyXML version  ", "          extmodules  expatextension  ", "The Distutils can also take care of creating source and binary", "distributions The sdist command run by python setuppy sdist", "builds a source distribution such as footargz Adding new", "commands isnt difficult bdistrpm and bdistwininst commands", "have already been contributed to create an RPM distribution and a", "Windows installer for the software respectively  Commands to create", "other distribution formats such as Debian packages and Solaris pkg", "files are in various stages of development", "All this is documented in a new manual Distributing Python Modules", "that joins the basic set of Python documentation", "XML Modules", "Python  included a simple XML parser in the form of the xmllib", "module contributed by Sjoerd Mullender  Since s release two", "different interfaces for processing XML have become common SAX", "version  of the Simple API for XML provides an eventdriven", "interface with some similarities to xmllib and the DOM Document", "Object Model provides a treebased interface transforming an XML", "document into a tree of nodes that can be traversed and modified", "Python  includes a SAX interface and a strippeddown DOM interface", "as part of the xml package Here we will give a brief overview of", "these new interfaces consult the Python documentation or the source", "code for complete details The Python XML SIG is also working on", "improved documentation", "SAX Support", "SAX defines an eventdriven interface for parsing XML  To use SAX", "you must write a SAX handler class  Handler classes inherit from", "various classes provided by SAX and override various methods that", "will then be called by the XML parser  For example the", "startElement and endElement methods are called for every", "starting and end tag encountered by the parser the characters", "method is called for every chunk of character data and so forth", "The advantage of the eventdriven approach is that the whole document", "doesnt have to be resident in memory at any one time which matters", "if you are processing really huge documents  However writing the SAX", "handler class can get very complicated if youre trying to modify the", "document structure in some elaborate way", "For example this little example program defines a handler that prints", "a message for every starting and ending tag and then parses the file", "hamletxml using it", "   from xml import sax", "   class SimpleHandlersaxContentHandler", "       def startElementself name attrs", "           print Start of element name attrskeys", "       def endElementself name", "           print End of element name", "    Create a parser object", "   parser  saxmakeparser", "    Tell it what handler to use", "   handler  SimpleHandler", "   parsersetContentHandler handler ", "    Parse a file", "   parserparse hamletxml ", "For more information consult the Python documentation or the XML", "HOWTO at httppyxmlsourceforgenettopicshowtoxmlhowtohtml", "DOM Support", "The Document Object Model is a treebased representation for an XML", "document  A toplevel Document instance is the root of the tree", "and has a single child which is the toplevel Element instance This", "Element has children nodes representing character data and any sub", "elements which may have further children of their own and so forth", "Using the DOM you can traverse the resulting tree any way you like", "access element and attribute values insert and delete nodes and", "convert the tree back into XML", "The DOM is useful for modifying XML documents because you can create", "a DOM tree modify it by adding new nodes or rearranging subtrees and", "then produce a new XML document as output  You can also construct a", "DOM tree manually and convert it to XML which can be a more flexible", "way of producing XML output than simply writing tagtag", "to a file", "The DOM implementation included with Python lives in the", "xmldomminidom module  Its a lightweight implementation of the", "Level  DOM with support for XML namespaces  The  parse and", "parseString convenience functions are provided for generating a", "DOM tree", "   from xmldom import minidom", "   doc  minidomparsehamletxml", "doc is a Document instance  Document like all the other DOM", "classes such as Element and Text is a subclass of the Node base", "class  All the nodes in a DOM tree therefore support certain common", "methods such as toxml which returns a string containing the XML", "representation of the node and its children  Each class also has", "special methods of its own for example Element and Document", "instances have a method to find all child elements with a given tag", "name Continuing from the previous line example", "   perslist  docgetElementsByTagName PERSONA ", "   print perslisttoxml", "   print perslisttoxml", "For the Hamlet XML file the above few lines output", "   PERSONACLAUDIUS king of Denmark PERSONA", "   PERSONAHAMLET son to the late and nephew to the present kingPERSONA", "The root element of the document is available as", "docdocumentElement and its children can be easily modified by", "deleting adding or removing nodes", "   root  docdocumentElement", "    Remove the first child", "   rootremoveChild rootchildNodes ", "    Move the new first child to the end", "   rootappendChild rootchildNodes ", "    Insert the new first child originally", "    the third child before the th child", "   rootinsertBefore rootchildNodes rootchildNodes ", "Again I will refer you to the Python documentation for a complete", "listing of the different Node classes and their various methods", "Relationship to PyXML", "The XML Special Interest Group has been working on XMLrelated Python", "code for a while  Its code distribution called PyXML is available", "from the SIGs Web pages at", "httpswwwpythonorgcommunitysigscurrentxmlsig The PyXML", "distribution also used the package name xml  If youve written", "programs that used PyXML youre probably wondering about its", "compatibility with the  xml package", "The answer is that Python s xml package isnt compatible with", "PyXML but can be made compatible by installing a recent version", "PyXML  Many applications can get by with the XML support that is", "included with Python  but more complicated applications will", "require that the full PyXML package will be installed  When", "installed PyXML versions  or greater will replace the xml", "package shipped with Python and will be a strict superset of the", "standard package adding a bunch of additional features  Some of the", "additional features in PyXML include", " DOM a full DOM implementation from FourThought Inc", " The xmlproc validating parser written by Lars Marius Garshol", " The sgmlop parser accelerator module written by Fredrik Lundh", "Module changes", "Lots of improvements and bugfixes were made to Pythons extensive", "standard library some of the affected modules include readline", "ConfigParser cgi calendar posix readline xmllib", "aifc chunk wave random shelve and nntplib  Consult the", "CVS logs for the exact patchbypatch details", "Brian Gallew contributed OpenSSL support for the socket module", "OpenSSL is an implementation of the Secure Socket Layer which", "encrypts the data being sent over a socket  When compiling Python", "you can edit ModulesSetup to include SSL support which adds an", "additional function to the socket module socketsslsocket", "keyfile certfile which takes a socket object and returns an SSL", "socket  The httplib and urllib modules were also changed to", "support https URLs though no one has implemented FTP or SMTP", "over SSL", "The httplib module has been rewritten by Greg Stein to support", "HTTP Backward compatibility with the  version of httplib is", "provided though using HTTP features such as pipelining will", "require rewriting code to use a different set of interfaces", "The Tkinter module now supports TclTk version   or  and", "support for the older x versions has been dropped  The Tkinter", "module now supports displaying Unicode strings in Tk widgets Also", "Fredrik Lundh contributed an optimization which makes operations like", "createline and createpolygon much faster especially when using", "lots of coordinates", "The curses module has been greatly extended starting from Oliver", "Andrichs enhanced version to provide many additional functions from", "ncurses and SYSV curses such as colour alternative character set", "support pads and mouse support  This means the module is no longer", "compatible with operating systems that only have BSD curses but there", "dont seem to be any currently maintained OSes that fall into this", "category", "As mentioned in the earlier discussion of s Unicode support the", "underlying implementation of the regular expressions provided by the", "re module has been changed  SRE a new regular expression engine", "written by Fredrik Lundh and partially funded by Hewlett Packard", "supports matching against both bit strings and Unicode strings", "New modules", "A number of new modules were added  Well simply list them with brief", "descriptions consult the  documentation for the details of a", "particular module", " atexit  For registering functions to be called before the Python", "  interpreter exits Code that currently sets sysexitfunc directly", "  should be changed to  use the atexit module instead importing", "  atexit and calling atexitregister with  the function to be", "  called on exit Contributed by Skip Montanaro", " codecs encodings unicodedata  Added as part of the new", "  Unicode support", " filecmp Supersedes the old cmp cmpcache and dircmp", "  modules which have now become deprecated Contributed by Gordon", "  MacMillan and Moshe Zadka", " gettext This module provides internationalization IN and", "  localization LN support for Python programs by providing an", "  interface to the GNU gettext message catalog library Integrated by", "  Barry Warsaw from separate contributions by Martin  von Lwis", "  Peter Funk and James Henstridge", " linuxaudiodev Support for the devaudio device on Linux a", "  twin to the existing sunaudiodev module Contributed by Peter", "  Bosch with fixes by Jeremy Hylton", " mmap An interface to memorymapped files on both Windows and", "  Unix  A files contents can be mapped directly into memory at", "  which point it behaves like a mutable string so its contents can be", "  read and modified  They can even be passed to functions that expect", "  ordinary strings such as the re module Contributed by Sam", "  Rushing with some extensions by AM Kuchling", " pyexpat An interface to the Expat XML parser Contributed by", "  Paul Prescod", " robotparser Parse a robotstxt file which is used for writing", "  Web spiders that politely avoid certain areas of a Web site  The", "  parser accepts the contents of a robotstxt file builds a set of", "  rules from it and can then answer questions about the fetchability", "  of a given URL  Contributed by Skip Montanaro", " tabnanny A modulescript to  check Python source code for", "  ambiguous indentation Contributed by Tim Peters", " UserString A base class useful for deriving objects that behave", "  like strings", " webbrowser A module that provides a platform independent way to", "  launch a web browser on a specific URL For each platform various", "  browsers are tried in a specific order The user can alter which", "  browser is launched by setting the BROWSER environment variable", "  Originally inspired by Eric S Raymonds patch to urllib which", "  added similar functionality but the final module comes from code", "  originally  implemented by Fred Drake as", "  ToolsidleBrowserControlpy and adapted for the standard library", "  by Fred", " winreg An interface to the Windows registry  winreg is an", "  adaptation of functions that have been part of PythonWin since ", "  but has now been added to the core  distribution and enhanced to", "  support Unicode winreg was written by Bill Tutt and Mark", "  Hammond", " zipfile A module for reading and writing ZIPformat archives", "  These are archives produced by PKZIP on DOSWindows or zip", "  on Unix not to be confused with gzipformat files which are", "  supported by the gzip module Contributed by James C Ahlstrom", " imputil A module that provides a simpler way for writing", "  customized import hooks in comparison to the existing ihooks", "  module  Implemented by Greg Stein with much discussion on python", "  dev along the way", "IDLE Improvements", "IDLE is the official Python crossplatform IDE written using Tkinter", "Python  includes IDLE  which adds a number of new features and", "improvements  A partial list", " UI improvements and optimizations especially in the area of syntax", "  highlighting and autoindentation", " The class browser now shows more information such as the top level", "  functions in a module", " Tab width is now a user settable option When opening an existing", "  Python file IDLE automatically detects the indentation conventions", "  and adapts", " There is now support for calling browsers on various platforms used", "  to open the Python documentation in a browser", " IDLE now has a command line which is largely similar to  the", "  vanilla Python interpreter", " Call tips were added in many places", " IDLE can now be installed as a package", " In the editor window there is now a linecolumn bar at the bottom", " Three new keystroke commands Check module AltF Import module", "  F and Run script CtrlF", "Deleted and Deprecated Modules", "A few modules have been dropped because theyre obsolete or because", "there are now better ways to do the same thing  The stdwin module", "is gone it was for a platformindependent windowing toolkit thats no", "longer developed", "A number of modules have been moved to the libold subdirectory", "cmp cmpcache dircmp dump  find grep packmail", "poly util whatsound zmod  If you have code which relies on", "a module  thats been moved to libold you can simply add that", "directory to syspath   to get them back but youre encouraged to", "update any code that uses these modules", "Acknowledgements", "The authors would like to thank the following people for offering", "suggestions on various drafts of this article David Bolen Mark", "Hammond Gregg Hauser Jeremy Hylton Fredrik Lundh Detlef Lannert", "Aahz Maruch Skip Montanaro Vladimir Marangozov Tobias Polzin Guido", "van Rossum Neil Schemenauer and Russ Schmidt"]